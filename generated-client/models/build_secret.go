// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// BuildSecret BuildSecret holds general information about image hubs
//
// swagger:model BuildSecret
type BuildSecret struct {

	// Name name of the build secret
	// Example: SECRET_1
	// Required: true
	Name *string `json:"name"`

	// Status of the secret
	// Pending = Secret value is not set
	// Consistent = Secret value is set
	// Example: Consistent
	// Enum: [Pending Consistent]
	Status string `json:"status,omitempty"`
}

// Validate validates this build secret
func (m *BuildSecret) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BuildSecret) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

var buildSecretTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Pending","Consistent"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		buildSecretTypeStatusPropEnum = append(buildSecretTypeStatusPropEnum, v)
	}
}

const (

	// BuildSecretStatusPending captures enum value "Pending"
	BuildSecretStatusPending string = "Pending"

	// BuildSecretStatusConsistent captures enum value "Consistent"
	BuildSecretStatusConsistent string = "Consistent"
)

// prop value enum
func (m *BuildSecret) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, buildSecretTypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *BuildSecret) validateStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this build secret based on context it is used
func (m *BuildSecret) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *BuildSecret) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BuildSecret) UnmarshalBinary(b []byte) error {
	var res BuildSecret
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
