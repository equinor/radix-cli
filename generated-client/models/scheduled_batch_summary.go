// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ScheduledBatchSummary ScheduledBatchSummary holds information about scheduled batch
//
// swagger:model ScheduledBatchSummary
type ScheduledBatchSummary struct {

	// Created timestamp
	// Example: 2006-01-02T15:04:05Z
	Created string `json:"created,omitempty"`

	// DeploymentName name of RadixDeployment for the batch
	// Required: true
	DeploymentName *string `json:"deploymentName"`

	// Ended timestamp
	// Example: 2006-01-02T15:04:05Z
	Ended string `json:"ended,omitempty"`

	// Jobs within the batch of ScheduledJobSummary
	JobList []*ScheduledJobSummary `json:"jobList"`

	// Deprecated: Message of a status, if any, of the job
	// Example: \"Error occurred\
	Message string `json:"message,omitempty"`

	// Name of the scheduled batch
	// Example: batch-20181029135644-algpv-6hznh
	// Required: true
	Name *string `json:"name"`

	// Started timestamp
	// Example: 2006-01-02T15:04:05Z
	Started string `json:"started,omitempty"`

	// Status of the job
	// Running ScheduledBatchJobStatusRunning  ScheduledBatchJobStatusRunning Active
	// Succeeded ScheduledBatchJobStatusSucceeded  ScheduledBatchJobStatusSucceeded Job succeeded
	// Failed ScheduledBatchJobStatusFailed  ScheduledBatchJobStatusFailed Job failed
	// Waiting ScheduledBatchJobStatusWaiting  ScheduledBatchJobStatusWaiting Job pending
	// Stopping ScheduledBatchJobStatusStopping  ScheduledBatchJobStatusStopping job is stopping
	// Stopped ScheduledBatchJobStatusStopped  ScheduledBatchJobStatusStopped job stopped
	// Active ScheduledBatchJobStatusActive  ScheduledBatchJobStatusActive job, one or more pods are not ready
	// Completed ScheduledBatchJobStatusCompleted  ScheduledBatchJobStatusCompleted batch jobs are completed
	// Example: Waiting
	// Required: true
	// Enum: ["Running","Succeeded","Failed","Waiting","Stopping","Stopped","Active","Completed"]
	Status *string `json:"status"`

	// TotalJobCount count of jobs, requested to be scheduled by a batch
	// Example: 5
	// Required: true
	TotalJobCount *int64 `json:"totalJobCount"`

	// replica
	Replica *ReplicaSummary `json:"replica,omitempty"`
}

// Validate validates this scheduled batch summary
func (m *ScheduledBatchSummary) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDeploymentName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateJobList(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTotalJobCount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReplica(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ScheduledBatchSummary) validateDeploymentName(formats strfmt.Registry) error {

	if err := validate.Required("deploymentName", "body", m.DeploymentName); err != nil {
		return err
	}

	return nil
}

func (m *ScheduledBatchSummary) validateJobList(formats strfmt.Registry) error {
	if swag.IsZero(m.JobList) { // not required
		return nil
	}

	for i := 0; i < len(m.JobList); i++ {
		if swag.IsZero(m.JobList[i]) { // not required
			continue
		}

		if m.JobList[i] != nil {
			if err := m.JobList[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("jobList" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("jobList" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ScheduledBatchSummary) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

var scheduledBatchSummaryTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Running","Succeeded","Failed","Waiting","Stopping","Stopped","Active","Completed"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		scheduledBatchSummaryTypeStatusPropEnum = append(scheduledBatchSummaryTypeStatusPropEnum, v)
	}
}

const (

	// ScheduledBatchSummaryStatusRunning captures enum value "Running"
	ScheduledBatchSummaryStatusRunning string = "Running"

	// ScheduledBatchSummaryStatusSucceeded captures enum value "Succeeded"
	ScheduledBatchSummaryStatusSucceeded string = "Succeeded"

	// ScheduledBatchSummaryStatusFailed captures enum value "Failed"
	ScheduledBatchSummaryStatusFailed string = "Failed"

	// ScheduledBatchSummaryStatusWaiting captures enum value "Waiting"
	ScheduledBatchSummaryStatusWaiting string = "Waiting"

	// ScheduledBatchSummaryStatusStopping captures enum value "Stopping"
	ScheduledBatchSummaryStatusStopping string = "Stopping"

	// ScheduledBatchSummaryStatusStopped captures enum value "Stopped"
	ScheduledBatchSummaryStatusStopped string = "Stopped"

	// ScheduledBatchSummaryStatusActive captures enum value "Active"
	ScheduledBatchSummaryStatusActive string = "Active"

	// ScheduledBatchSummaryStatusCompleted captures enum value "Completed"
	ScheduledBatchSummaryStatusCompleted string = "Completed"
)

// prop value enum
func (m *ScheduledBatchSummary) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, scheduledBatchSummaryTypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ScheduledBatchSummary) validateStatus(formats strfmt.Registry) error {

	if err := validate.Required("status", "body", m.Status); err != nil {
		return err
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", *m.Status); err != nil {
		return err
	}

	return nil
}

func (m *ScheduledBatchSummary) validateTotalJobCount(formats strfmt.Registry) error {

	if err := validate.Required("totalJobCount", "body", m.TotalJobCount); err != nil {
		return err
	}

	return nil
}

func (m *ScheduledBatchSummary) validateReplica(formats strfmt.Registry) error {
	if swag.IsZero(m.Replica) { // not required
		return nil
	}

	if m.Replica != nil {
		if err := m.Replica.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("replica")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("replica")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this scheduled batch summary based on the context it is used
func (m *ScheduledBatchSummary) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateJobList(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateReplica(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ScheduledBatchSummary) contextValidateJobList(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.JobList); i++ {

		if m.JobList[i] != nil {

			if swag.IsZero(m.JobList[i]) { // not required
				return nil
			}

			if err := m.JobList[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("jobList" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("jobList" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ScheduledBatchSummary) contextValidateReplica(ctx context.Context, formats strfmt.Registry) error {

	if m.Replica != nil {

		if swag.IsZero(m.Replica) { // not required
			return nil
		}

		if err := m.Replica.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("replica")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("replica")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ScheduledBatchSummary) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ScheduledBatchSummary) UnmarshalBinary(b []byte) error {
	var res ScheduledBatchSummary
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
