// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TLS TLS configuration and status for external DNS
//
// swagger:model TLS
type TLS struct {

	// Certificates holds the X509 certificate chain
	// The first certificate in the list should be the host certificate and the rest should be intermediate certificates
	Certificates []*X509Certificate `json:"certificates"`

	// Status of TLS certificate and private key
	// Pending TLSStatusPending  TLS certificate and private key not set
	// Consistent TLSStatusConsistent  TLS certificate and private key is valid
	// Invalid TLSStatusInvalid  TLS certificate and private key is invalid
	// Example: Consistent
	// Required: true
	// Enum: ["Pending","Consistent","Invalid"]
	Status *string `json:"status"`

	// StatusMessages contains a list of messages related to Status
	StatusMessages []string `json:"statusMessages"`

	// UseAutomation describes if TLS certificate is automatically issued using automation (ACME)
	// Required: true
	UseAutomation *bool `json:"useAutomation"`

	// automation
	Automation *TLSAutomation `json:"automation,omitempty"`
}

// Validate validates this TLS
func (m *TLS) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCertificates(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUseAutomation(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAutomation(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TLS) validateCertificates(formats strfmt.Registry) error {
	if swag.IsZero(m.Certificates) { // not required
		return nil
	}

	for i := 0; i < len(m.Certificates); i++ {
		if swag.IsZero(m.Certificates[i]) { // not required
			continue
		}

		if m.Certificates[i] != nil {
			if err := m.Certificates[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("certificates" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("certificates" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var tlsTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Pending","Consistent","Invalid"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		tlsTypeStatusPropEnum = append(tlsTypeStatusPropEnum, v)
	}
}

const (

	// TLSStatusPending captures enum value "Pending"
	TLSStatusPending string = "Pending"

	// TLSStatusConsistent captures enum value "Consistent"
	TLSStatusConsistent string = "Consistent"

	// TLSStatusInvalid captures enum value "Invalid"
	TLSStatusInvalid string = "Invalid"
)

// prop value enum
func (m *TLS) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, tlsTypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *TLS) validateStatus(formats strfmt.Registry) error {

	if err := validate.Required("status", "body", m.Status); err != nil {
		return err
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", *m.Status); err != nil {
		return err
	}

	return nil
}

func (m *TLS) validateUseAutomation(formats strfmt.Registry) error {

	if err := validate.Required("useAutomation", "body", m.UseAutomation); err != nil {
		return err
	}

	return nil
}

func (m *TLS) validateAutomation(formats strfmt.Registry) error {
	if swag.IsZero(m.Automation) { // not required
		return nil
	}

	if m.Automation != nil {
		if err := m.Automation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("automation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("automation")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this TLS based on the context it is used
func (m *TLS) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCertificates(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateAutomation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TLS) contextValidateCertificates(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Certificates); i++ {

		if m.Certificates[i] != nil {

			if swag.IsZero(m.Certificates[i]) { // not required
				return nil
			}

			if err := m.Certificates[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("certificates" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("certificates" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *TLS) contextValidateAutomation(ctx context.Context, formats strfmt.Registry) error {

	if m.Automation != nil {

		if swag.IsZero(m.Automation) { // not required
			return nil
		}

		if err := m.Automation.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("automation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("automation")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TLS) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TLS) UnmarshalBinary(b []byte) error {
	var res TLS
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
