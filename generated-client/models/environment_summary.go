// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// EnvironmentSummary EnvironmentSummary holds general information about environment
//
// swagger:model EnvironmentSummary
type EnvironmentSummary struct {

	// BranchMapping The branch mapped to this environment
	BranchMapping string `json:"branchMapping,omitempty"`

	// Name of the environment
	// Example: prod
	Name string `json:"name,omitempty"`

	// Status of the environment
	// Pending = Environment exists in Radix config, but not in cluster
	// Consistent = Environment exists in Radix config and in cluster
	// Orphan = Environment does not exist in Radix config, but exists in cluster
	// Example: Consistent
	// Enum: [Pending Consistent Orphan]
	Status string `json:"status,omitempty"`

	// active deployment
	ActiveDeployment *DeploymentSummary `json:"activeDeployment,omitempty"`
}

// Validate validates this environment summary
func (m *EnvironmentSummary) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateActiveDeployment(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var environmentSummaryTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Pending","Consistent","Orphan"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		environmentSummaryTypeStatusPropEnum = append(environmentSummaryTypeStatusPropEnum, v)
	}
}

const (

	// EnvironmentSummaryStatusPending captures enum value "Pending"
	EnvironmentSummaryStatusPending string = "Pending"

	// EnvironmentSummaryStatusConsistent captures enum value "Consistent"
	EnvironmentSummaryStatusConsistent string = "Consistent"

	// EnvironmentSummaryStatusOrphan captures enum value "Orphan"
	EnvironmentSummaryStatusOrphan string = "Orphan"
)

// prop value enum
func (m *EnvironmentSummary) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, environmentSummaryTypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *EnvironmentSummary) validateStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

func (m *EnvironmentSummary) validateActiveDeployment(formats strfmt.Registry) error {
	if swag.IsZero(m.ActiveDeployment) { // not required
		return nil
	}

	if m.ActiveDeployment != nil {
		if err := m.ActiveDeployment.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("activeDeployment")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("activeDeployment")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this environment summary based on the context it is used
func (m *EnvironmentSummary) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateActiveDeployment(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *EnvironmentSummary) contextValidateActiveDeployment(ctx context.Context, formats strfmt.Registry) error {

	if m.ActiveDeployment != nil {

		if swag.IsZero(m.ActiveDeployment) { // not required
			return nil
		}

		if err := m.ActiveDeployment.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("activeDeployment")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("activeDeployment")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *EnvironmentSummary) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *EnvironmentSummary) UnmarshalBinary(b []byte) error {
	var res EnvironmentSummary
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
