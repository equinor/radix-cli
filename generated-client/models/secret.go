// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Secret Secret holds general information about secret
//
// swagger:model Secret
type Secret struct {

	// Component name of the component having the secret
	// Example: api
	Component string `json:"component,omitempty"`

	// DisplayName of the secret
	// Example: Database password
	DisplayName string `json:"displayName,omitempty"`

	// ID of the secret within the Resource
	// Example: clientId
	ID string `json:"id,omitempty"`

	// Name of the secret or its property, related to type and resource)
	// Example: db_password
	// Required: true
	Name *string `json:"name"`

	// Resource of the secrets
	// Example: volumeAbc
	Resource string `json:"resource,omitempty"`

	// Status of the secret
	// Pending = Secret exists in Radix config, but not in cluster
	// Consistent = Secret exists in Radix config and in cluster
	// NotAvailable = Secret is available in external secret configuration but not in cluster
	// Example: Consistent
	Status string `json:"status,omitempty"`

	// StatusMessages contains a list of messages related to the Status
	StatusMessages []string `json:"statusMessages"`

	// TLSCertificates holds the TLS certificate and certificate authorities (CA)
	// The first certificate in the list should be the TLS certificate and the rest should be CA certificates
	TLSCertificates []*TLSCertificate `json:"tlsCertificates"`

	// type
	Type SecretType `json:"type,omitempty"`
}

// Validate validates this secret
func (m *Secret) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTLSCertificates(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Secret) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *Secret) validateTLSCertificates(formats strfmt.Registry) error {
	if swag.IsZero(m.TLSCertificates) { // not required
		return nil
	}

	for i := 0; i < len(m.TLSCertificates); i++ {
		if swag.IsZero(m.TLSCertificates[i]) { // not required
			continue
		}

		if m.TLSCertificates[i] != nil {
			if err := m.TLSCertificates[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("tlsCertificates" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("tlsCertificates" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Secret) validateType(formats strfmt.Registry) error {
	if swag.IsZero(m.Type) { // not required
		return nil
	}

	if err := m.Type.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("type")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("type")
		}
		return err
	}

	return nil
}

// ContextValidate validate this secret based on the context it is used
func (m *Secret) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateTLSCertificates(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Secret) contextValidateTLSCertificates(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.TLSCertificates); i++ {

		if m.TLSCertificates[i] != nil {

			if swag.IsZero(m.TLSCertificates[i]) { // not required
				return nil
			}

			if err := m.TLSCertificates[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("tlsCertificates" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("tlsCertificates" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Secret) contextValidateType(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.Type) { // not required
		return nil
	}

	if err := m.Type.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("type")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("type")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Secret) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Secret) UnmarshalBinary(b []byte) error {
	var res Secret
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
