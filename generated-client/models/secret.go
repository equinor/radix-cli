// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Secret Secret holds general information about secret
//
// swagger:model Secret
type Secret struct {

	// Component name of the component having the secret
	// Example: api
	Component string `json:"component,omitempty"`

	// DisplayName of the secret
	// Example: Database password
	DisplayName string `json:"displayName,omitempty"`

	// ID of the secret within the Resource
	// Example: clientId
	ID string `json:"id,omitempty"`

	// Name of the secret or its property, related to type and resource)
	// Example: db_password
	// Required: true
	Name *string `json:"name"`

	// Resource of the secrets
	// Example: volumeAbc
	Resource string `json:"resource,omitempty"`

	// Status of the secret
	// Pending = Secret exists in Radix config, but not in cluster
	// Consistent = Secret exists in Radix config and in cluster
	// NotAvailable = Secret is available in external secret configuration but not in cluster
	// Example: Consistent
	// Enum: [Pending Consistent NotAvailable]
	Status string `json:"status,omitempty"`

	// Type of the secret
	// generic SecretTypeGeneric
	// azure-blob-fuse-volume SecretTypeAzureBlobFuseVolume
	// csi-azure-blob-volume SecretTypeCsiAzureBlobVolume
	// csi-azure-key-vault-creds SecretTypeCsiAzureKeyVaultCreds
	// csi-azure-key-vault-item SecretTypeCsiAzureKeyVaultItem
	// client-cert-auth SecretTypeClientCertificateAuth
	// oauth2-proxy SecretTypeOAuth2Proxy
	// Example: client-cert
	// Enum: [generic azure-blob-fuse-volume csi-azure-blob-volume csi-azure-key-vault-creds csi-azure-key-vault-item client-cert-auth oauth2-proxy]
	Type string `json:"type,omitempty"`
}

// Validate validates this secret
func (m *Secret) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Secret) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

var secretTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Pending","Consistent","NotAvailable"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		secretTypeStatusPropEnum = append(secretTypeStatusPropEnum, v)
	}
}

const (

	// SecretStatusPending captures enum value "Pending"
	SecretStatusPending string = "Pending"

	// SecretStatusConsistent captures enum value "Consistent"
	SecretStatusConsistent string = "Consistent"

	// SecretStatusNotAvailable captures enum value "NotAvailable"
	SecretStatusNotAvailable string = "NotAvailable"
)

// prop value enum
func (m *Secret) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, secretTypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Secret) validateStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

var secretTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["generic","azure-blob-fuse-volume","csi-azure-blob-volume","csi-azure-key-vault-creds","csi-azure-key-vault-item","client-cert-auth","oauth2-proxy"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		secretTypeTypePropEnum = append(secretTypeTypePropEnum, v)
	}
}

const (

	// SecretTypeGeneric captures enum value "generic"
	SecretTypeGeneric string = "generic"

	// SecretTypeAzureDashBlobDashFuseDashVolume captures enum value "azure-blob-fuse-volume"
	SecretTypeAzureDashBlobDashFuseDashVolume string = "azure-blob-fuse-volume"

	// SecretTypeCsiDashAzureDashBlobDashVolume captures enum value "csi-azure-blob-volume"
	SecretTypeCsiDashAzureDashBlobDashVolume string = "csi-azure-blob-volume"

	// SecretTypeCsiDashAzureDashKeyDashVaultDashCreds captures enum value "csi-azure-key-vault-creds"
	SecretTypeCsiDashAzureDashKeyDashVaultDashCreds string = "csi-azure-key-vault-creds"

	// SecretTypeCsiDashAzureDashKeyDashVaultDashItem captures enum value "csi-azure-key-vault-item"
	SecretTypeCsiDashAzureDashKeyDashVaultDashItem string = "csi-azure-key-vault-item"

	// SecretTypeClientDashCertDashAuth captures enum value "client-cert-auth"
	SecretTypeClientDashCertDashAuth string = "client-cert-auth"

	// SecretTypeOauth2DashProxy captures enum value "oauth2-proxy"
	SecretTypeOauth2DashProxy string = "oauth2-proxy"
)

// prop value enum
func (m *Secret) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, secretTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Secret) validateType(formats strfmt.Registry) error {
	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this secret based on context it is used
func (m *Secret) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *Secret) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Secret) UnmarshalBinary(b []byte) error {
	var res Secret
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
