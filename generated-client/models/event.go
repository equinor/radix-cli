// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// Event Event holds information about Kubernetes events
//
// swagger:model Event
type Event struct {

	// Kind of object involved in this event
	// Example: Pod
	InvolvedObjectKind string `json:"involvedObjectKind,omitempty"`

	// Name of object involved in this event
	// Example: www-74cb7c986-fgcrl
	InvolvedObjectName string `json:"involvedObjectName,omitempty"`

	// Namespace of object involved in this event
	// Example: myapp-production
	InvolvedObjectNamespace string `json:"involvedObjectNamespace,omitempty"`

	// The time (ISO8601) at which the event was last recorded
	// Example: 2020-11-05T13:25:07.000Z
	LastTimestamp interface{} `json:"lastTimestamp,omitempty"`

	// A human-readable description of the status of this event
	// Example: 'Readiness probe failed: dial tcp 10.40.1.5:3003: connect: connection refused'
	Message string `json:"message,omitempty"`

	// A short, machine understandable string that gives the reason for this event
	// Example: Unhealthy
	Reason string `json:"reason,omitempty"`

	// Type of event (Normal, Warning)
	// Example: Warning
	Type string `json:"type,omitempty"`

	// involved object state
	InvolvedObjectState *ObjectState `json:"involvedObjectState,omitempty"`
}

// Validate validates this event
func (m *Event) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateInvolvedObjectState(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Event) validateInvolvedObjectState(formats strfmt.Registry) error {
	if swag.IsZero(m.InvolvedObjectState) { // not required
		return nil
	}

	if m.InvolvedObjectState != nil {
		if err := m.InvolvedObjectState.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("involvedObjectState")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("involvedObjectState")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this event based on the context it is used
func (m *Event) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateInvolvedObjectState(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Event) contextValidateInvolvedObjectState(ctx context.Context, formats strfmt.Registry) error {

	if m.InvolvedObjectState != nil {

		if swag.IsZero(m.InvolvedObjectState) { // not required
			return nil
		}

		if err := m.InvolvedObjectState.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("involvedObjectState")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("involvedObjectState")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Event) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Event) UnmarshalBinary(b []byte) error {
	var res Event
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
