// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DeploymentItem DeploymentItem describe a deployment short info
//
// swagger:model DeploymentItem
type DeploymentItem struct {

	// ActiveFrom Timestamp when the deployment starts (or created)
	// Example: 2006-01-02T15:04:05Z
	// Required: true
	ActiveFrom *string `json:"activeFrom"`

	// ActiveTo Timestamp when the deployment ends
	// Example: 2006-01-02T15:04:05Z
	ActiveTo string `json:"activeTo,omitempty"`

	// GitCommitHash the hash of the git commit from which radixconfig.yaml was parsed
	// Example: 4faca8595c5283a9d0f17a623b9255a0d9866a2e
	GitCommitHash string `json:"gitCommitHash,omitempty"`

	// Name the unique name of the Radix application deployment
	// Example: radix-canary-golang-tzbqi
	// Required: true
	Name *string `json:"name"`
}

// Validate validates this deployment item
func (m *DeploymentItem) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateActiveFrom(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DeploymentItem) validateActiveFrom(formats strfmt.Registry) error {

	if err := validate.Required("activeFrom", "body", m.ActiveFrom); err != nil {
		return err
	}

	return nil
}

func (m *DeploymentItem) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this deployment item based on context it is used
func (m *DeploymentItem) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *DeploymentItem) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DeploymentItem) UnmarshalBinary(b []byte) error {
	var res DeploymentItem
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
