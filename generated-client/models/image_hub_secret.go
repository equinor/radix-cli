// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ImageHubSecret ImageHubSecret holds general information about image hubs
//
// swagger:model ImageHubSecret
type ImageHubSecret struct {

	// Email provided in radixconfig.yaml
	// Example: radix@equinor.com
	Email string `json:"email,omitempty"`

	// Server name of the image hub
	// Example: myprivaterepo.azurecr.io
	// Required: true
	Server *string `json:"server"`

	// Status of the secret
	// Pending = Secret value is not set
	// Consistent = Secret value is set
	// Example: Consistent
	// Enum: [Pending Consistent]
	Status string `json:"status,omitempty"`

	// Username for connecting to private image hub
	// Example: my-user-name
	// Required: true
	Username *string `json:"username"`
}

// Validate validates this image hub secret
func (m *ImageHubSecret) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateServer(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUsername(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ImageHubSecret) validateServer(formats strfmt.Registry) error {

	if err := validate.Required("server", "body", m.Server); err != nil {
		return err
	}

	return nil
}

var imageHubSecretTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Pending","Consistent"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		imageHubSecretTypeStatusPropEnum = append(imageHubSecretTypeStatusPropEnum, v)
	}
}

const (

	// ImageHubSecretStatusPending captures enum value "Pending"
	ImageHubSecretStatusPending string = "Pending"

	// ImageHubSecretStatusConsistent captures enum value "Consistent"
	ImageHubSecretStatusConsistent string = "Consistent"
)

// prop value enum
func (m *ImageHubSecret) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, imageHubSecretTypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ImageHubSecret) validateStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

func (m *ImageHubSecret) validateUsername(formats strfmt.Registry) error {

	if err := validate.Required("username", "body", m.Username); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this image hub secret based on context it is used
func (m *ImageHubSecret) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ImageHubSecret) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ImageHubSecret) UnmarshalBinary(b []byte) error {
	var res ImageHubSecret
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
