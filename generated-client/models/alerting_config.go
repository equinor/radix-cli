// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// AlertingConfig AlertingConfig current alert settings
//
// swagger:model AlertingConfig
type AlertingConfig struct {

	// AlertNames is the list of alert names that can be handled by Radix
	AlertNames []string `json:"alertNames"`

	// Enabled flag tells if alerting is enabled or disabled
	Enabled bool `json:"enabled,omitempty"`

	// Ready flag tells tells if alerting is ready to be configured
	// Value is always false when Enabled is false
	// Vlaue is True if Enabled is true and Radix operator has processed the alert configuration
	Ready bool `json:"ready,omitempty"`

	// alerts
	Alerts AlertConfigList `json:"alerts,omitempty"`

	// receiver secret status
	ReceiverSecretStatus ReceiverConfigSecretStatusMap `json:"receiverSecretStatus,omitempty"`

	// receivers
	Receivers ReceiverConfigMap `json:"receivers,omitempty"`
}

// Validate validates this alerting config
func (m *AlertingConfig) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAlerts(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReceiverSecretStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReceivers(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AlertingConfig) validateAlerts(formats strfmt.Registry) error {
	if swag.IsZero(m.Alerts) { // not required
		return nil
	}

	if err := m.Alerts.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("alerts")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("alerts")
		}
		return err
	}

	return nil
}

func (m *AlertingConfig) validateReceiverSecretStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.ReceiverSecretStatus) { // not required
		return nil
	}

	if m.ReceiverSecretStatus != nil {
		if err := m.ReceiverSecretStatus.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("receiverSecretStatus")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("receiverSecretStatus")
			}
			return err
		}
	}

	return nil
}

func (m *AlertingConfig) validateReceivers(formats strfmt.Registry) error {
	if swag.IsZero(m.Receivers) { // not required
		return nil
	}

	if m.Receivers != nil {
		if err := m.Receivers.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("receivers")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("receivers")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this alerting config based on the context it is used
func (m *AlertingConfig) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAlerts(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateReceiverSecretStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateReceivers(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AlertingConfig) contextValidateAlerts(ctx context.Context, formats strfmt.Registry) error {

	if err := m.Alerts.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("alerts")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("alerts")
		}
		return err
	}

	return nil
}

func (m *AlertingConfig) contextValidateReceiverSecretStatus(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.ReceiverSecretStatus) { // not required
		return nil
	}

	if err := m.ReceiverSecretStatus.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("receiverSecretStatus")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("receiverSecretStatus")
		}
		return err
	}

	return nil
}

func (m *AlertingConfig) contextValidateReceivers(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.Receivers) { // not required
		return nil
	}

	if err := m.Receivers.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("receivers")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("receivers")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AlertingConfig) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AlertingConfig) UnmarshalBinary(b []byte) error {
	var res AlertingConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
