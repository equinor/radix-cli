// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AuxiliaryResourceDeployment AuxiliaryResourceDeployment describes the state of the auxiliary resource's deployment
//
// swagger:model AuxiliaryResourceDeployment
type AuxiliaryResourceDeployment struct {

	// Running replicas of the auxiliary resource's deployment
	ReplicaList []*ReplicaSummary `json:"replicaList"`

	// Status of the auxiliary resource's deployment
	// Example: Consistent
	// Required: true
	// Enum: ["Stopped","Consistent","Reconciling"]
	Status *string `json:"status"`
}

// Validate validates this auxiliary resource deployment
func (m *AuxiliaryResourceDeployment) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateReplicaList(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AuxiliaryResourceDeployment) validateReplicaList(formats strfmt.Registry) error {
	if swag.IsZero(m.ReplicaList) { // not required
		return nil
	}

	for i := 0; i < len(m.ReplicaList); i++ {
		if swag.IsZero(m.ReplicaList[i]) { // not required
			continue
		}

		if m.ReplicaList[i] != nil {
			if err := m.ReplicaList[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("replicaList" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("replicaList" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var auxiliaryResourceDeploymentTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Stopped","Consistent","Reconciling"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		auxiliaryResourceDeploymentTypeStatusPropEnum = append(auxiliaryResourceDeploymentTypeStatusPropEnum, v)
	}
}

const (

	// AuxiliaryResourceDeploymentStatusStopped captures enum value "Stopped"
	AuxiliaryResourceDeploymentStatusStopped string = "Stopped"

	// AuxiliaryResourceDeploymentStatusConsistent captures enum value "Consistent"
	AuxiliaryResourceDeploymentStatusConsistent string = "Consistent"

	// AuxiliaryResourceDeploymentStatusReconciling captures enum value "Reconciling"
	AuxiliaryResourceDeploymentStatusReconciling string = "Reconciling"
)

// prop value enum
func (m *AuxiliaryResourceDeployment) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, auxiliaryResourceDeploymentTypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *AuxiliaryResourceDeployment) validateStatus(formats strfmt.Registry) error {

	if err := validate.Required("status", "body", m.Status); err != nil {
		return err
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", *m.Status); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this auxiliary resource deployment based on the context it is used
func (m *AuxiliaryResourceDeployment) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateReplicaList(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AuxiliaryResourceDeployment) contextValidateReplicaList(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ReplicaList); i++ {

		if m.ReplicaList[i] != nil {

			if swag.IsZero(m.ReplicaList[i]) { // not required
				return nil
			}

			if err := m.ReplicaList[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("replicaList" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("replicaList" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *AuxiliaryResourceDeployment) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AuxiliaryResourceDeployment) UnmarshalBinary(b []byte) error {
	var res AuxiliaryResourceDeployment
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
