// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DeploymentSummary DeploymentSummary describe an deployment
//
// swagger:model DeploymentSummary
type DeploymentSummary struct {

	// ActiveFrom Timestamp when the deployment starts (or created)
	// Example: 2006-01-02T15:04:05Z
	// Required: true
	ActiveFrom *string `json:"activeFrom"`

	// ActiveTo Timestamp when the deployment ends
	// Example: 2006-01-02T15:04:05Z
	ActiveTo string `json:"activeTo,omitempty"`

	// CommitID the commit ID of the branch to build
	// Example: 4faca8595c5283a9d0f17a623b9255a0d9866a2e
	CommitID string `json:"commitID,omitempty"`

	// Array of component summaries
	Components []*ComponentSummary `json:"components"`

	// Name of job creating deployment
	CreatedByJob string `json:"createdByJob,omitempty"`

	// Environment the environment this Radix application deployment runs in
	// Example: prod
	// Required: true
	Environment *string `json:"environment"`

	// GitCommitHash the hash of the git commit from which radixconfig.yaml was parsed
	// Example: 4faca8595c5283a9d0f17a623b9255a0d9866a2e
	GitCommitHash string `json:"gitCommitHash,omitempty"`

	// GitTags the git tags that the git commit hash points to
	// Example: \"v1.22.1 v1.22.3\
	GitTags string `json:"gitTags,omitempty"`

	// Name the unique name of the Radix application deployment
	// Example: radix-canary-golang-tzbqi
	// Required: true
	Name *string `json:"name"`

	// Type of pipeline job
	// Example: build-deploy
	// Enum: ["build","build-deploy","promote","deploy"]
	PipelineJobType string `json:"pipelineJobType,omitempty"`

	// Name of the environment the deployment was promoted from
	// Applies only for pipeline jobs of type 'promote'
	// Example: qa
	PromotedFromEnvironment string `json:"promotedFromEnvironment,omitempty"`
}

// Validate validates this deployment summary
func (m *DeploymentSummary) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateActiveFrom(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateComponents(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEnvironment(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePipelineJobType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DeploymentSummary) validateActiveFrom(formats strfmt.Registry) error {

	if err := validate.Required("activeFrom", "body", m.ActiveFrom); err != nil {
		return err
	}

	return nil
}

func (m *DeploymentSummary) validateComponents(formats strfmt.Registry) error {
	if swag.IsZero(m.Components) { // not required
		return nil
	}

	for i := 0; i < len(m.Components); i++ {
		if swag.IsZero(m.Components[i]) { // not required
			continue
		}

		if m.Components[i] != nil {
			if err := m.Components[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("components" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("components" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *DeploymentSummary) validateEnvironment(formats strfmt.Registry) error {

	if err := validate.Required("environment", "body", m.Environment); err != nil {
		return err
	}

	return nil
}

func (m *DeploymentSummary) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

var deploymentSummaryTypePipelineJobTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["build","build-deploy","promote","deploy"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		deploymentSummaryTypePipelineJobTypePropEnum = append(deploymentSummaryTypePipelineJobTypePropEnum, v)
	}
}

const (

	// DeploymentSummaryPipelineJobTypeBuild captures enum value "build"
	DeploymentSummaryPipelineJobTypeBuild string = "build"

	// DeploymentSummaryPipelineJobTypeBuildDashDeploy captures enum value "build-deploy"
	DeploymentSummaryPipelineJobTypeBuildDashDeploy string = "build-deploy"

	// DeploymentSummaryPipelineJobTypePromote captures enum value "promote"
	DeploymentSummaryPipelineJobTypePromote string = "promote"

	// DeploymentSummaryPipelineJobTypeDeploy captures enum value "deploy"
	DeploymentSummaryPipelineJobTypeDeploy string = "deploy"
)

// prop value enum
func (m *DeploymentSummary) validatePipelineJobTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, deploymentSummaryTypePipelineJobTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *DeploymentSummary) validatePipelineJobType(formats strfmt.Registry) error {
	if swag.IsZero(m.PipelineJobType) { // not required
		return nil
	}

	// value enum
	if err := m.validatePipelineJobTypeEnum("pipelineJobType", "body", m.PipelineJobType); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this deployment summary based on the context it is used
func (m *DeploymentSummary) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateComponents(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DeploymentSummary) contextValidateComponents(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Components); i++ {

		if m.Components[i] != nil {

			if swag.IsZero(m.Components[i]) { // not required
				return nil
			}

			if err := m.Components[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("components" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("components" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *DeploymentSummary) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DeploymentSummary) UnmarshalBinary(b []byte) error {
	var res DeploymentSummary
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
