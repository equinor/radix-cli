// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DeployKeyAndSecret DeployKeyAndSecret Holds generated public deploy key and shared secret
//
// swagger:model DeployKeyAndSecret
type DeployKeyAndSecret struct {

	// PublicDeployKey the public value of the deploy key
	// Required: true
	PublicDeployKey *string `json:"publicDeployKey"`

	// SharedSecret the shared secret
	// Required: true
	SharedSecret *string `json:"sharedSecret"`
}

// Validate validates this deploy key and secret
func (m *DeployKeyAndSecret) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePublicDeployKey(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSharedSecret(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DeployKeyAndSecret) validatePublicDeployKey(formats strfmt.Registry) error {

	if err := validate.Required("publicDeployKey", "body", m.PublicDeployKey); err != nil {
		return err
	}

	return nil
}

func (m *DeployKeyAndSecret) validateSharedSecret(formats strfmt.Registry) error {

	if err := validate.Required("sharedSecret", "body", m.SharedSecret); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this deploy key and secret based on context it is used
func (m *DeployKeyAndSecret) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *DeployKeyAndSecret) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DeployKeyAndSecret) UnmarshalBinary(b []byte) error {
	var res DeployKeyAndSecret
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
