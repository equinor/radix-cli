// Code generated by go-swagger; DO NOT EDIT.

package job

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// StopBatchReader is a Reader for the StopBatch structure.
type StopBatchReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *StopBatchReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 204:
		result := NewStopBatchNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewStopBatchBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewStopBatchUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewStopBatchForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewStopBatchNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /applications/{appName}/environments/{envName}/jobcomponents/{jobComponentName}/batches/{batchName}/stop] stopBatch", response, response.Code())
	}
}

// NewStopBatchNoContent creates a StopBatchNoContent with default headers values
func NewStopBatchNoContent() *StopBatchNoContent {
	return &StopBatchNoContent{}
}

/*
StopBatchNoContent describes a response with status code 204, with default header values.

Success
*/
type StopBatchNoContent struct {
}

// IsSuccess returns true when this stop batch no content response has a 2xx status code
func (o *StopBatchNoContent) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this stop batch no content response has a 3xx status code
func (o *StopBatchNoContent) IsRedirect() bool {
	return false
}

// IsClientError returns true when this stop batch no content response has a 4xx status code
func (o *StopBatchNoContent) IsClientError() bool {
	return false
}

// IsServerError returns true when this stop batch no content response has a 5xx status code
func (o *StopBatchNoContent) IsServerError() bool {
	return false
}

// IsCode returns true when this stop batch no content response a status code equal to that given
func (o *StopBatchNoContent) IsCode(code int) bool {
	return code == 204
}

// Code gets the status code for the stop batch no content response
func (o *StopBatchNoContent) Code() int {
	return 204
}

func (o *StopBatchNoContent) Error() string {
	return fmt.Sprintf("[POST /applications/{appName}/environments/{envName}/jobcomponents/{jobComponentName}/batches/{batchName}/stop][%d] stopBatchNoContent ", 204)
}

func (o *StopBatchNoContent) String() string {
	return fmt.Sprintf("[POST /applications/{appName}/environments/{envName}/jobcomponents/{jobComponentName}/batches/{batchName}/stop][%d] stopBatchNoContent ", 204)
}

func (o *StopBatchNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewStopBatchBadRequest creates a StopBatchBadRequest with default headers values
func NewStopBatchBadRequest() *StopBatchBadRequest {
	return &StopBatchBadRequest{}
}

/*
StopBatchBadRequest describes a response with status code 400, with default header values.

Invalid batch
*/
type StopBatchBadRequest struct {
}

// IsSuccess returns true when this stop batch bad request response has a 2xx status code
func (o *StopBatchBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this stop batch bad request response has a 3xx status code
func (o *StopBatchBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this stop batch bad request response has a 4xx status code
func (o *StopBatchBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this stop batch bad request response has a 5xx status code
func (o *StopBatchBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this stop batch bad request response a status code equal to that given
func (o *StopBatchBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the stop batch bad request response
func (o *StopBatchBadRequest) Code() int {
	return 400
}

func (o *StopBatchBadRequest) Error() string {
	return fmt.Sprintf("[POST /applications/{appName}/environments/{envName}/jobcomponents/{jobComponentName}/batches/{batchName}/stop][%d] stopBatchBadRequest ", 400)
}

func (o *StopBatchBadRequest) String() string {
	return fmt.Sprintf("[POST /applications/{appName}/environments/{envName}/jobcomponents/{jobComponentName}/batches/{batchName}/stop][%d] stopBatchBadRequest ", 400)
}

func (o *StopBatchBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewStopBatchUnauthorized creates a StopBatchUnauthorized with default headers values
func NewStopBatchUnauthorized() *StopBatchUnauthorized {
	return &StopBatchUnauthorized{}
}

/*
StopBatchUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type StopBatchUnauthorized struct {
}

// IsSuccess returns true when this stop batch unauthorized response has a 2xx status code
func (o *StopBatchUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this stop batch unauthorized response has a 3xx status code
func (o *StopBatchUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this stop batch unauthorized response has a 4xx status code
func (o *StopBatchUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this stop batch unauthorized response has a 5xx status code
func (o *StopBatchUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this stop batch unauthorized response a status code equal to that given
func (o *StopBatchUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the stop batch unauthorized response
func (o *StopBatchUnauthorized) Code() int {
	return 401
}

func (o *StopBatchUnauthorized) Error() string {
	return fmt.Sprintf("[POST /applications/{appName}/environments/{envName}/jobcomponents/{jobComponentName}/batches/{batchName}/stop][%d] stopBatchUnauthorized ", 401)
}

func (o *StopBatchUnauthorized) String() string {
	return fmt.Sprintf("[POST /applications/{appName}/environments/{envName}/jobcomponents/{jobComponentName}/batches/{batchName}/stop][%d] stopBatchUnauthorized ", 401)
}

func (o *StopBatchUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewStopBatchForbidden creates a StopBatchForbidden with default headers values
func NewStopBatchForbidden() *StopBatchForbidden {
	return &StopBatchForbidden{}
}

/*
StopBatchForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type StopBatchForbidden struct {
}

// IsSuccess returns true when this stop batch forbidden response has a 2xx status code
func (o *StopBatchForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this stop batch forbidden response has a 3xx status code
func (o *StopBatchForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this stop batch forbidden response has a 4xx status code
func (o *StopBatchForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this stop batch forbidden response has a 5xx status code
func (o *StopBatchForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this stop batch forbidden response a status code equal to that given
func (o *StopBatchForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the stop batch forbidden response
func (o *StopBatchForbidden) Code() int {
	return 403
}

func (o *StopBatchForbidden) Error() string {
	return fmt.Sprintf("[POST /applications/{appName}/environments/{envName}/jobcomponents/{jobComponentName}/batches/{batchName}/stop][%d] stopBatchForbidden ", 403)
}

func (o *StopBatchForbidden) String() string {
	return fmt.Sprintf("[POST /applications/{appName}/environments/{envName}/jobcomponents/{jobComponentName}/batches/{batchName}/stop][%d] stopBatchForbidden ", 403)
}

func (o *StopBatchForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewStopBatchNotFound creates a StopBatchNotFound with default headers values
func NewStopBatchNotFound() *StopBatchNotFound {
	return &StopBatchNotFound{}
}

/*
StopBatchNotFound describes a response with status code 404, with default header values.

Not found
*/
type StopBatchNotFound struct {
}

// IsSuccess returns true when this stop batch not found response has a 2xx status code
func (o *StopBatchNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this stop batch not found response has a 3xx status code
func (o *StopBatchNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this stop batch not found response has a 4xx status code
func (o *StopBatchNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this stop batch not found response has a 5xx status code
func (o *StopBatchNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this stop batch not found response a status code equal to that given
func (o *StopBatchNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the stop batch not found response
func (o *StopBatchNotFound) Code() int {
	return 404
}

func (o *StopBatchNotFound) Error() string {
	return fmt.Sprintf("[POST /applications/{appName}/environments/{envName}/jobcomponents/{jobComponentName}/batches/{batchName}/stop][%d] stopBatchNotFound ", 404)
}

func (o *StopBatchNotFound) String() string {
	return fmt.Sprintf("[POST /applications/{appName}/environments/{envName}/jobcomponents/{jobComponentName}/batches/{batchName}/stop][%d] stopBatchNotFound ", 404)
}

func (o *StopBatchNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
