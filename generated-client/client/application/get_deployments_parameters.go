// Code generated by go-swagger; DO NOT EDIT.

package application

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetDeploymentsParams creates a new GetDeploymentsParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetDeploymentsParams() *GetDeploymentsParams {
	return &GetDeploymentsParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetDeploymentsParamsWithTimeout creates a new GetDeploymentsParams object
// with the ability to set a timeout on a request.
func NewGetDeploymentsParamsWithTimeout(timeout time.Duration) *GetDeploymentsParams {
	return &GetDeploymentsParams{
		timeout: timeout,
	}
}

// NewGetDeploymentsParamsWithContext creates a new GetDeploymentsParams object
// with the ability to set a context for a request.
func NewGetDeploymentsParamsWithContext(ctx context.Context) *GetDeploymentsParams {
	return &GetDeploymentsParams{
		Context: ctx,
	}
}

// NewGetDeploymentsParamsWithHTTPClient creates a new GetDeploymentsParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetDeploymentsParamsWithHTTPClient(client *http.Client) *GetDeploymentsParams {
	return &GetDeploymentsParams{
		HTTPClient: client,
	}
}

/*
GetDeploymentsParams contains all the parameters to send to the API endpoint

	for the get deployments operation.

	Typically these are written to a http.Request.
*/
type GetDeploymentsParams struct {

	/* ImpersonateGroup.

	   Works only with custom setup of cluster. Allow impersonation of test group (Required if Impersonate-User is set)
	*/
	ImpersonateGroup []string

	/* ImpersonateUser.

	   Works only with custom setup of cluster. Allow impersonation of test users (Required if Impersonate-Group is set)
	*/
	ImpersonateUser *string

	/* AppName.

	   name of Radix application
	*/
	AppName string

	/* Environment.

	   environment of Radix application
	*/
	Environment *string

	/* Latest.

	   indicator to allow only listing latest
	*/
	Latest *bool

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get deployments params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetDeploymentsParams) WithDefaults() *GetDeploymentsParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get deployments params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetDeploymentsParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the get deployments params
func (o *GetDeploymentsParams) WithTimeout(timeout time.Duration) *GetDeploymentsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get deployments params
func (o *GetDeploymentsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get deployments params
func (o *GetDeploymentsParams) WithContext(ctx context.Context) *GetDeploymentsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get deployments params
func (o *GetDeploymentsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get deployments params
func (o *GetDeploymentsParams) WithHTTPClient(client *http.Client) *GetDeploymentsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get deployments params
func (o *GetDeploymentsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithImpersonateGroup adds the impersonateGroup to the get deployments params
func (o *GetDeploymentsParams) WithImpersonateGroup(impersonateGroup []string) *GetDeploymentsParams {
	o.SetImpersonateGroup(impersonateGroup)
	return o
}

// SetImpersonateGroup adds the impersonateGroup to the get deployments params
func (o *GetDeploymentsParams) SetImpersonateGroup(impersonateGroup []string) {
	o.ImpersonateGroup = impersonateGroup
}

// WithImpersonateUser adds the impersonateUser to the get deployments params
func (o *GetDeploymentsParams) WithImpersonateUser(impersonateUser *string) *GetDeploymentsParams {
	o.SetImpersonateUser(impersonateUser)
	return o
}

// SetImpersonateUser adds the impersonateUser to the get deployments params
func (o *GetDeploymentsParams) SetImpersonateUser(impersonateUser *string) {
	o.ImpersonateUser = impersonateUser
}

// WithAppName adds the appName to the get deployments params
func (o *GetDeploymentsParams) WithAppName(appName string) *GetDeploymentsParams {
	o.SetAppName(appName)
	return o
}

// SetAppName adds the appName to the get deployments params
func (o *GetDeploymentsParams) SetAppName(appName string) {
	o.AppName = appName
}

// WithEnvironment adds the environment to the get deployments params
func (o *GetDeploymentsParams) WithEnvironment(environment *string) *GetDeploymentsParams {
	o.SetEnvironment(environment)
	return o
}

// SetEnvironment adds the environment to the get deployments params
func (o *GetDeploymentsParams) SetEnvironment(environment *string) {
	o.Environment = environment
}

// WithLatest adds the latest to the get deployments params
func (o *GetDeploymentsParams) WithLatest(latest *bool) *GetDeploymentsParams {
	o.SetLatest(latest)
	return o
}

// SetLatest adds the latest to the get deployments params
func (o *GetDeploymentsParams) SetLatest(latest *bool) {
	o.Latest = latest
}

// WriteToRequest writes these params to a swagger request
func (o *GetDeploymentsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.ImpersonateGroup != nil {

		// binding items for Impersonate-Group
		joinedImpersonateGroup := o.bindParamImpersonateGroup(reg)

		// header array param Impersonate-Group
		if len(joinedImpersonateGroup) > 0 {
			if err := r.SetHeaderParam("Impersonate-Group", joinedImpersonateGroup[0]); err != nil {
				return err
			}
		}
	}

	if o.ImpersonateUser != nil {

		// header param Impersonate-User
		if err := r.SetHeaderParam("Impersonate-User", *o.ImpersonateUser); err != nil {
			return err
		}
	}

	// path param appName
	if err := r.SetPathParam("appName", o.AppName); err != nil {
		return err
	}

	if o.Environment != nil {

		// query param environment
		var qrEnvironment string

		if o.Environment != nil {
			qrEnvironment = *o.Environment
		}
		qEnvironment := qrEnvironment
		if qEnvironment != "" {

			if err := r.SetQueryParam("environment", qEnvironment); err != nil {
				return err
			}
		}
	}

	if o.Latest != nil {

		// query param latest
		var qrLatest bool

		if o.Latest != nil {
			qrLatest = *o.Latest
		}
		qLatest := swag.FormatBool(qrLatest)
		if qLatest != "" {

			if err := r.SetQueryParam("latest", qLatest); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamGetDeployments binds the parameter Impersonate-Group
func (o *GetDeploymentsParams) bindParamImpersonateGroup(formats strfmt.Registry) []string {
	impersonateGroupIR := o.ImpersonateGroup

	var impersonateGroupIC []string
	for _, impersonateGroupIIR := range impersonateGroupIR { // explode []string

		impersonateGroupIIV := impersonateGroupIIR // string as string
		impersonateGroupIC = append(impersonateGroupIC, impersonateGroupIIV)
	}

	// items.CollectionFormat: ""
	impersonateGroupIS := swag.JoinByFormat(impersonateGroupIC, "")

	return impersonateGroupIS
}
