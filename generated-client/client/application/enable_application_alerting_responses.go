// Code generated by go-swagger; DO NOT EDIT.

package application

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/equinor/radix-cli/generated-client/models"
)

// EnableApplicationAlertingReader is a Reader for the EnableApplicationAlerting structure.
type EnableApplicationAlertingReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *EnableApplicationAlertingReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewEnableApplicationAlertingOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewEnableApplicationAlertingBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewEnableApplicationAlertingUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewEnableApplicationAlertingForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewEnableApplicationAlertingNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewEnableApplicationAlertingInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /applications/{appName}/alerting/enable] enableApplicationAlerting", response, response.Code())
	}
}

// NewEnableApplicationAlertingOK creates a EnableApplicationAlertingOK with default headers values
func NewEnableApplicationAlertingOK() *EnableApplicationAlertingOK {
	return &EnableApplicationAlertingOK{}
}

/*
EnableApplicationAlertingOK describes a response with status code 200, with default header values.

Successful enable alerting
*/
type EnableApplicationAlertingOK struct {
	Payload *models.AlertingConfig
}

// IsSuccess returns true when this enable application alerting o k response has a 2xx status code
func (o *EnableApplicationAlertingOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this enable application alerting o k response has a 3xx status code
func (o *EnableApplicationAlertingOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this enable application alerting o k response has a 4xx status code
func (o *EnableApplicationAlertingOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this enable application alerting o k response has a 5xx status code
func (o *EnableApplicationAlertingOK) IsServerError() bool {
	return false
}

// IsCode returns true when this enable application alerting o k response a status code equal to that given
func (o *EnableApplicationAlertingOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the enable application alerting o k response
func (o *EnableApplicationAlertingOK) Code() int {
	return 200
}

func (o *EnableApplicationAlertingOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /applications/{appName}/alerting/enable][%d] enableApplicationAlertingOK %s", 200, payload)
}

func (o *EnableApplicationAlertingOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /applications/{appName}/alerting/enable][%d] enableApplicationAlertingOK %s", 200, payload)
}

func (o *EnableApplicationAlertingOK) GetPayload() *models.AlertingConfig {
	return o.Payload
}

func (o *EnableApplicationAlertingOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.AlertingConfig)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewEnableApplicationAlertingBadRequest creates a EnableApplicationAlertingBadRequest with default headers values
func NewEnableApplicationAlertingBadRequest() *EnableApplicationAlertingBadRequest {
	return &EnableApplicationAlertingBadRequest{}
}

/*
EnableApplicationAlertingBadRequest describes a response with status code 400, with default header values.

Alerting already enabled
*/
type EnableApplicationAlertingBadRequest struct {
}

// IsSuccess returns true when this enable application alerting bad request response has a 2xx status code
func (o *EnableApplicationAlertingBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this enable application alerting bad request response has a 3xx status code
func (o *EnableApplicationAlertingBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this enable application alerting bad request response has a 4xx status code
func (o *EnableApplicationAlertingBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this enable application alerting bad request response has a 5xx status code
func (o *EnableApplicationAlertingBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this enable application alerting bad request response a status code equal to that given
func (o *EnableApplicationAlertingBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the enable application alerting bad request response
func (o *EnableApplicationAlertingBadRequest) Code() int {
	return 400
}

func (o *EnableApplicationAlertingBadRequest) Error() string {
	return fmt.Sprintf("[POST /applications/{appName}/alerting/enable][%d] enableApplicationAlertingBadRequest", 400)
}

func (o *EnableApplicationAlertingBadRequest) String() string {
	return fmt.Sprintf("[POST /applications/{appName}/alerting/enable][%d] enableApplicationAlertingBadRequest", 400)
}

func (o *EnableApplicationAlertingBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewEnableApplicationAlertingUnauthorized creates a EnableApplicationAlertingUnauthorized with default headers values
func NewEnableApplicationAlertingUnauthorized() *EnableApplicationAlertingUnauthorized {
	return &EnableApplicationAlertingUnauthorized{}
}

/*
EnableApplicationAlertingUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type EnableApplicationAlertingUnauthorized struct {
}

// IsSuccess returns true when this enable application alerting unauthorized response has a 2xx status code
func (o *EnableApplicationAlertingUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this enable application alerting unauthorized response has a 3xx status code
func (o *EnableApplicationAlertingUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this enable application alerting unauthorized response has a 4xx status code
func (o *EnableApplicationAlertingUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this enable application alerting unauthorized response has a 5xx status code
func (o *EnableApplicationAlertingUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this enable application alerting unauthorized response a status code equal to that given
func (o *EnableApplicationAlertingUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the enable application alerting unauthorized response
func (o *EnableApplicationAlertingUnauthorized) Code() int {
	return 401
}

func (o *EnableApplicationAlertingUnauthorized) Error() string {
	return fmt.Sprintf("[POST /applications/{appName}/alerting/enable][%d] enableApplicationAlertingUnauthorized", 401)
}

func (o *EnableApplicationAlertingUnauthorized) String() string {
	return fmt.Sprintf("[POST /applications/{appName}/alerting/enable][%d] enableApplicationAlertingUnauthorized", 401)
}

func (o *EnableApplicationAlertingUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewEnableApplicationAlertingForbidden creates a EnableApplicationAlertingForbidden with default headers values
func NewEnableApplicationAlertingForbidden() *EnableApplicationAlertingForbidden {
	return &EnableApplicationAlertingForbidden{}
}

/*
EnableApplicationAlertingForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type EnableApplicationAlertingForbidden struct {
}

// IsSuccess returns true when this enable application alerting forbidden response has a 2xx status code
func (o *EnableApplicationAlertingForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this enable application alerting forbidden response has a 3xx status code
func (o *EnableApplicationAlertingForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this enable application alerting forbidden response has a 4xx status code
func (o *EnableApplicationAlertingForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this enable application alerting forbidden response has a 5xx status code
func (o *EnableApplicationAlertingForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this enable application alerting forbidden response a status code equal to that given
func (o *EnableApplicationAlertingForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the enable application alerting forbidden response
func (o *EnableApplicationAlertingForbidden) Code() int {
	return 403
}

func (o *EnableApplicationAlertingForbidden) Error() string {
	return fmt.Sprintf("[POST /applications/{appName}/alerting/enable][%d] enableApplicationAlertingForbidden", 403)
}

func (o *EnableApplicationAlertingForbidden) String() string {
	return fmt.Sprintf("[POST /applications/{appName}/alerting/enable][%d] enableApplicationAlertingForbidden", 403)
}

func (o *EnableApplicationAlertingForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewEnableApplicationAlertingNotFound creates a EnableApplicationAlertingNotFound with default headers values
func NewEnableApplicationAlertingNotFound() *EnableApplicationAlertingNotFound {
	return &EnableApplicationAlertingNotFound{}
}

/*
EnableApplicationAlertingNotFound describes a response with status code 404, with default header values.

Not found
*/
type EnableApplicationAlertingNotFound struct {
}

// IsSuccess returns true when this enable application alerting not found response has a 2xx status code
func (o *EnableApplicationAlertingNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this enable application alerting not found response has a 3xx status code
func (o *EnableApplicationAlertingNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this enable application alerting not found response has a 4xx status code
func (o *EnableApplicationAlertingNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this enable application alerting not found response has a 5xx status code
func (o *EnableApplicationAlertingNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this enable application alerting not found response a status code equal to that given
func (o *EnableApplicationAlertingNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the enable application alerting not found response
func (o *EnableApplicationAlertingNotFound) Code() int {
	return 404
}

func (o *EnableApplicationAlertingNotFound) Error() string {
	return fmt.Sprintf("[POST /applications/{appName}/alerting/enable][%d] enableApplicationAlertingNotFound", 404)
}

func (o *EnableApplicationAlertingNotFound) String() string {
	return fmt.Sprintf("[POST /applications/{appName}/alerting/enable][%d] enableApplicationAlertingNotFound", 404)
}

func (o *EnableApplicationAlertingNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewEnableApplicationAlertingInternalServerError creates a EnableApplicationAlertingInternalServerError with default headers values
func NewEnableApplicationAlertingInternalServerError() *EnableApplicationAlertingInternalServerError {
	return &EnableApplicationAlertingInternalServerError{}
}

/*
EnableApplicationAlertingInternalServerError describes a response with status code 500, with default header values.

Internal server error
*/
type EnableApplicationAlertingInternalServerError struct {
}

// IsSuccess returns true when this enable application alerting internal server error response has a 2xx status code
func (o *EnableApplicationAlertingInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this enable application alerting internal server error response has a 3xx status code
func (o *EnableApplicationAlertingInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this enable application alerting internal server error response has a 4xx status code
func (o *EnableApplicationAlertingInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this enable application alerting internal server error response has a 5xx status code
func (o *EnableApplicationAlertingInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this enable application alerting internal server error response a status code equal to that given
func (o *EnableApplicationAlertingInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the enable application alerting internal server error response
func (o *EnableApplicationAlertingInternalServerError) Code() int {
	return 500
}

func (o *EnableApplicationAlertingInternalServerError) Error() string {
	return fmt.Sprintf("[POST /applications/{appName}/alerting/enable][%d] enableApplicationAlertingInternalServerError", 500)
}

func (o *EnableApplicationAlertingInternalServerError) String() string {
	return fmt.Sprintf("[POST /applications/{appName}/alerting/enable][%d] enableApplicationAlertingInternalServerError", 500)
}

func (o *EnableApplicationAlertingInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
