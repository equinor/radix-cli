// Code generated by go-swagger; DO NOT EDIT.

package component

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewScaleComponentParams creates a new ScaleComponentParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewScaleComponentParams() *ScaleComponentParams {
	return &ScaleComponentParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewScaleComponentParamsWithTimeout creates a new ScaleComponentParams object
// with the ability to set a timeout on a request.
func NewScaleComponentParamsWithTimeout(timeout time.Duration) *ScaleComponentParams {
	return &ScaleComponentParams{
		timeout: timeout,
	}
}

// NewScaleComponentParamsWithContext creates a new ScaleComponentParams object
// with the ability to set a context for a request.
func NewScaleComponentParamsWithContext(ctx context.Context) *ScaleComponentParams {
	return &ScaleComponentParams{
		Context: ctx,
	}
}

// NewScaleComponentParamsWithHTTPClient creates a new ScaleComponentParams object
// with the ability to set a custom HTTPClient for a request.
func NewScaleComponentParamsWithHTTPClient(client *http.Client) *ScaleComponentParams {
	return &ScaleComponentParams{
		HTTPClient: client,
	}
}

/*
ScaleComponentParams contains all the parameters to send to the API endpoint

	for the scale component operation.

	Typically these are written to a http.Request.
*/
type ScaleComponentParams struct {

	/* ImpersonateGroup.

	   Works only with custom setup of cluster. Allow impersonation of test group (Required if Impersonate-User is set)
	*/
	ImpersonateGroup []string

	/* ImpersonateUser.

	   Works only with custom setup of cluster. Allow impersonation of test users (Required if Impersonate-Group is set)
	*/
	ImpersonateUser *string

	/* AppName.

	   Name of application
	*/
	AppName string

	/* ComponentName.

	   Name of component
	*/
	ComponentName string

	/* EnvName.

	   Name of environment
	*/
	EnvName string

	/* Replicas.

	   New desired number of replicas
	*/
	Replicas string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the scale component params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ScaleComponentParams) WithDefaults() *ScaleComponentParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the scale component params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ScaleComponentParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the scale component params
func (o *ScaleComponentParams) WithTimeout(timeout time.Duration) *ScaleComponentParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the scale component params
func (o *ScaleComponentParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the scale component params
func (o *ScaleComponentParams) WithContext(ctx context.Context) *ScaleComponentParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the scale component params
func (o *ScaleComponentParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the scale component params
func (o *ScaleComponentParams) WithHTTPClient(client *http.Client) *ScaleComponentParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the scale component params
func (o *ScaleComponentParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithImpersonateGroup adds the impersonateGroup to the scale component params
func (o *ScaleComponentParams) WithImpersonateGroup(impersonateGroup []string) *ScaleComponentParams {
	o.SetImpersonateGroup(impersonateGroup)
	return o
}

// SetImpersonateGroup adds the impersonateGroup to the scale component params
func (o *ScaleComponentParams) SetImpersonateGroup(impersonateGroup []string) {
	o.ImpersonateGroup = impersonateGroup
}

// WithImpersonateUser adds the impersonateUser to the scale component params
func (o *ScaleComponentParams) WithImpersonateUser(impersonateUser *string) *ScaleComponentParams {
	o.SetImpersonateUser(impersonateUser)
	return o
}

// SetImpersonateUser adds the impersonateUser to the scale component params
func (o *ScaleComponentParams) SetImpersonateUser(impersonateUser *string) {
	o.ImpersonateUser = impersonateUser
}

// WithAppName adds the appName to the scale component params
func (o *ScaleComponentParams) WithAppName(appName string) *ScaleComponentParams {
	o.SetAppName(appName)
	return o
}

// SetAppName adds the appName to the scale component params
func (o *ScaleComponentParams) SetAppName(appName string) {
	o.AppName = appName
}

// WithComponentName adds the componentName to the scale component params
func (o *ScaleComponentParams) WithComponentName(componentName string) *ScaleComponentParams {
	o.SetComponentName(componentName)
	return o
}

// SetComponentName adds the componentName to the scale component params
func (o *ScaleComponentParams) SetComponentName(componentName string) {
	o.ComponentName = componentName
}

// WithEnvName adds the envName to the scale component params
func (o *ScaleComponentParams) WithEnvName(envName string) *ScaleComponentParams {
	o.SetEnvName(envName)
	return o
}

// SetEnvName adds the envName to the scale component params
func (o *ScaleComponentParams) SetEnvName(envName string) {
	o.EnvName = envName
}

// WithReplicas adds the replicas to the scale component params
func (o *ScaleComponentParams) WithReplicas(replicas string) *ScaleComponentParams {
	o.SetReplicas(replicas)
	return o
}

// SetReplicas adds the replicas to the scale component params
func (o *ScaleComponentParams) SetReplicas(replicas string) {
	o.Replicas = replicas
}

// WriteToRequest writes these params to a swagger request
func (o *ScaleComponentParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.ImpersonateGroup != nil {

		// binding items for Impersonate-Group
		joinedImpersonateGroup := o.bindParamImpersonateGroup(reg)

		// header array param Impersonate-Group
		if len(joinedImpersonateGroup) > 0 {
			if err := r.SetHeaderParam("Impersonate-Group", joinedImpersonateGroup[0]); err != nil {
				return err
			}
		}
	}

	if o.ImpersonateUser != nil {

		// header param Impersonate-User
		if err := r.SetHeaderParam("Impersonate-User", *o.ImpersonateUser); err != nil {
			return err
		}
	}

	// path param appName
	if err := r.SetPathParam("appName", o.AppName); err != nil {
		return err
	}

	// path param componentName
	if err := r.SetPathParam("componentName", o.ComponentName); err != nil {
		return err
	}

	// path param envName
	if err := r.SetPathParam("envName", o.EnvName); err != nil {
		return err
	}

	// path param replicas
	if err := r.SetPathParam("replicas", o.Replicas); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamScaleComponent binds the parameter Impersonate-Group
func (o *ScaleComponentParams) bindParamImpersonateGroup(formats strfmt.Registry) []string {
	impersonateGroupIR := o.ImpersonateGroup

	var impersonateGroupIC []string
	for _, impersonateGroupIIR := range impersonateGroupIR { // explode []string

		impersonateGroupIIV := impersonateGroupIIR // string as string
		impersonateGroupIC = append(impersonateGroupIC, impersonateGroupIIV)
	}

	// items.CollectionFormat: ""
	impersonateGroupIS := swag.JoinByFormat(impersonateGroupIC, "")

	return impersonateGroupIS
}
