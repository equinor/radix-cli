// Code generated by go-swagger; DO NOT EDIT.

package component

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewLogParams creates a new LogParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewLogParams() *LogParams {
	return &LogParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewLogParamsWithTimeout creates a new LogParams object
// with the ability to set a timeout on a request.
func NewLogParamsWithTimeout(timeout time.Duration) *LogParams {
	return &LogParams{
		timeout: timeout,
	}
}

// NewLogParamsWithContext creates a new LogParams object
// with the ability to set a context for a request.
func NewLogParamsWithContext(ctx context.Context) *LogParams {
	return &LogParams{
		Context: ctx,
	}
}

// NewLogParamsWithHTTPClient creates a new LogParams object
// with the ability to set a custom HTTPClient for a request.
func NewLogParamsWithHTTPClient(client *http.Client) *LogParams {
	return &LogParams{
		HTTPClient: client,
	}
}

/*
LogParams contains all the parameters to send to the API endpoint

	for the log operation.

	Typically these are written to a http.Request.
*/
type LogParams struct {

	/* ImpersonateGroup.

	   Works only with custom setup of cluster. Allow impersonation of test group (Required if Impersonate-User is set)
	*/
	ImpersonateGroup []string

	/* ImpersonateUser.

	   Works only with custom setup of cluster. Allow impersonation of test users (Required if Impersonate-Group is set)
	*/
	ImpersonateUser *string

	/* AppName.

	   Name of application
	*/
	AppName string

	/* ComponentName.

	   Name of component
	*/
	ComponentName string

	/* DeploymentName.

	   Name of deployment
	*/
	DeploymentName string

	/* File.

	   Get log as a file if true

	   Format: boolean
	*/
	File *string

	/* Lines.

	   Get log lines (example 1000)

	   Format: number
	*/
	Lines *string

	/* PodName.

	   Name of pod
	*/
	PodName string

	/* Previous.

	   Get previous container log if true

	   Format: boolean
	*/
	Previous *string

	/* SinceTime.

	   Get log only from sinceTime (example 2020-03-18T07:20:41+00:00)

	   Format: date-time
	*/
	SinceTime *strfmt.DateTime

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the log params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *LogParams) WithDefaults() *LogParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the log params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *LogParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the log params
func (o *LogParams) WithTimeout(timeout time.Duration) *LogParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the log params
func (o *LogParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the log params
func (o *LogParams) WithContext(ctx context.Context) *LogParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the log params
func (o *LogParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the log params
func (o *LogParams) WithHTTPClient(client *http.Client) *LogParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the log params
func (o *LogParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithImpersonateGroup adds the impersonateGroup to the log params
func (o *LogParams) WithImpersonateGroup(impersonateGroup []string) *LogParams {
	o.SetImpersonateGroup(impersonateGroup)
	return o
}

// SetImpersonateGroup adds the impersonateGroup to the log params
func (o *LogParams) SetImpersonateGroup(impersonateGroup []string) {
	o.ImpersonateGroup = impersonateGroup
}

// WithImpersonateUser adds the impersonateUser to the log params
func (o *LogParams) WithImpersonateUser(impersonateUser *string) *LogParams {
	o.SetImpersonateUser(impersonateUser)
	return o
}

// SetImpersonateUser adds the impersonateUser to the log params
func (o *LogParams) SetImpersonateUser(impersonateUser *string) {
	o.ImpersonateUser = impersonateUser
}

// WithAppName adds the appName to the log params
func (o *LogParams) WithAppName(appName string) *LogParams {
	o.SetAppName(appName)
	return o
}

// SetAppName adds the appName to the log params
func (o *LogParams) SetAppName(appName string) {
	o.AppName = appName
}

// WithComponentName adds the componentName to the log params
func (o *LogParams) WithComponentName(componentName string) *LogParams {
	o.SetComponentName(componentName)
	return o
}

// SetComponentName adds the componentName to the log params
func (o *LogParams) SetComponentName(componentName string) {
	o.ComponentName = componentName
}

// WithDeploymentName adds the deploymentName to the log params
func (o *LogParams) WithDeploymentName(deploymentName string) *LogParams {
	o.SetDeploymentName(deploymentName)
	return o
}

// SetDeploymentName adds the deploymentName to the log params
func (o *LogParams) SetDeploymentName(deploymentName string) {
	o.DeploymentName = deploymentName
}

// WithFile adds the file to the log params
func (o *LogParams) WithFile(file *string) *LogParams {
	o.SetFile(file)
	return o
}

// SetFile adds the file to the log params
func (o *LogParams) SetFile(file *string) {
	o.File = file
}

// WithLines adds the lines to the log params
func (o *LogParams) WithLines(lines *string) *LogParams {
	o.SetLines(lines)
	return o
}

// SetLines adds the lines to the log params
func (o *LogParams) SetLines(lines *string) {
	o.Lines = lines
}

// WithPodName adds the podName to the log params
func (o *LogParams) WithPodName(podName string) *LogParams {
	o.SetPodName(podName)
	return o
}

// SetPodName adds the podName to the log params
func (o *LogParams) SetPodName(podName string) {
	o.PodName = podName
}

// WithPrevious adds the previous to the log params
func (o *LogParams) WithPrevious(previous *string) *LogParams {
	o.SetPrevious(previous)
	return o
}

// SetPrevious adds the previous to the log params
func (o *LogParams) SetPrevious(previous *string) {
	o.Previous = previous
}

// WithSinceTime adds the sinceTime to the log params
func (o *LogParams) WithSinceTime(sinceTime *strfmt.DateTime) *LogParams {
	o.SetSinceTime(sinceTime)
	return o
}

// SetSinceTime adds the sinceTime to the log params
func (o *LogParams) SetSinceTime(sinceTime *strfmt.DateTime) {
	o.SinceTime = sinceTime
}

// WriteToRequest writes these params to a swagger request
func (o *LogParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.ImpersonateGroup != nil {

		// binding items for Impersonate-Group
		joinedImpersonateGroup := o.bindParamImpersonateGroup(reg)

		// header array param Impersonate-Group
		if len(joinedImpersonateGroup) > 0 {
			if err := r.SetHeaderParam("Impersonate-Group", joinedImpersonateGroup[0]); err != nil {
				return err
			}
		}
	}

	if o.ImpersonateUser != nil {

		// header param Impersonate-User
		if err := r.SetHeaderParam("Impersonate-User", *o.ImpersonateUser); err != nil {
			return err
		}
	}

	// path param appName
	if err := r.SetPathParam("appName", o.AppName); err != nil {
		return err
	}

	// path param componentName
	if err := r.SetPathParam("componentName", o.ComponentName); err != nil {
		return err
	}

	// path param deploymentName
	if err := r.SetPathParam("deploymentName", o.DeploymentName); err != nil {
		return err
	}

	if o.File != nil {

		// query param file
		var qrFile string

		if o.File != nil {
			qrFile = *o.File
		}
		qFile := qrFile
		if qFile != "" {

			if err := r.SetQueryParam("file", qFile); err != nil {
				return err
			}
		}
	}

	if o.Lines != nil {

		// query param lines
		var qrLines string

		if o.Lines != nil {
			qrLines = *o.Lines
		}
		qLines := qrLines
		if qLines != "" {

			if err := r.SetQueryParam("lines", qLines); err != nil {
				return err
			}
		}
	}

	// path param podName
	if err := r.SetPathParam("podName", o.PodName); err != nil {
		return err
	}

	if o.Previous != nil {

		// query param previous
		var qrPrevious string

		if o.Previous != nil {
			qrPrevious = *o.Previous
		}
		qPrevious := qrPrevious
		if qPrevious != "" {

			if err := r.SetQueryParam("previous", qPrevious); err != nil {
				return err
			}
		}
	}

	if o.SinceTime != nil {

		// query param sinceTime
		var qrSinceTime strfmt.DateTime

		if o.SinceTime != nil {
			qrSinceTime = *o.SinceTime
		}
		qSinceTime := qrSinceTime.String()
		if qSinceTime != "" {

			if err := r.SetQueryParam("sinceTime", qSinceTime); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamLog binds the parameter Impersonate-Group
func (o *LogParams) bindParamImpersonateGroup(formats strfmt.Registry) []string {
	impersonateGroupIR := o.ImpersonateGroup

	var impersonateGroupIC []string
	for _, impersonateGroupIIR := range impersonateGroupIR { // explode []string

		impersonateGroupIIV := impersonateGroupIIR // string as string
		impersonateGroupIC = append(impersonateGroupIC, impersonateGroupIIV)
	}

	// items.CollectionFormat: ""
	impersonateGroupIS := swag.JoinByFormat(impersonateGroupIC, "")

	return impersonateGroupIS
}
