// Code generated by go-swagger; DO NOT EDIT.

package component

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// StopComponentReader is a Reader for the StopComponent structure.
type StopComponentReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *StopComponentReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewStopComponentOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewStopComponentUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewStopComponentNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /applications/{appName}/environments/{envName}/components/{componentName}/stop] stopComponent", response, response.Code())
	}
}

// NewStopComponentOK creates a StopComponentOK with default headers values
func NewStopComponentOK() *StopComponentOK {
	return &StopComponentOK{}
}

/*
StopComponentOK describes a response with status code 200, with default header values.

Component stopped ok
*/
type StopComponentOK struct {
}

// IsSuccess returns true when this stop component o k response has a 2xx status code
func (o *StopComponentOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this stop component o k response has a 3xx status code
func (o *StopComponentOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this stop component o k response has a 4xx status code
func (o *StopComponentOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this stop component o k response has a 5xx status code
func (o *StopComponentOK) IsServerError() bool {
	return false
}

// IsCode returns true when this stop component o k response a status code equal to that given
func (o *StopComponentOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the stop component o k response
func (o *StopComponentOK) Code() int {
	return 200
}

func (o *StopComponentOK) Error() string {
	return fmt.Sprintf("[POST /applications/{appName}/environments/{envName}/components/{componentName}/stop][%d] stopComponentOK ", 200)
}

func (o *StopComponentOK) String() string {
	return fmt.Sprintf("[POST /applications/{appName}/environments/{envName}/components/{componentName}/stop][%d] stopComponentOK ", 200)
}

func (o *StopComponentOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewStopComponentUnauthorized creates a StopComponentUnauthorized with default headers values
func NewStopComponentUnauthorized() *StopComponentUnauthorized {
	return &StopComponentUnauthorized{}
}

/*
StopComponentUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type StopComponentUnauthorized struct {
}

// IsSuccess returns true when this stop component unauthorized response has a 2xx status code
func (o *StopComponentUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this stop component unauthorized response has a 3xx status code
func (o *StopComponentUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this stop component unauthorized response has a 4xx status code
func (o *StopComponentUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this stop component unauthorized response has a 5xx status code
func (o *StopComponentUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this stop component unauthorized response a status code equal to that given
func (o *StopComponentUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the stop component unauthorized response
func (o *StopComponentUnauthorized) Code() int {
	return 401
}

func (o *StopComponentUnauthorized) Error() string {
	return fmt.Sprintf("[POST /applications/{appName}/environments/{envName}/components/{componentName}/stop][%d] stopComponentUnauthorized ", 401)
}

func (o *StopComponentUnauthorized) String() string {
	return fmt.Sprintf("[POST /applications/{appName}/environments/{envName}/components/{componentName}/stop][%d] stopComponentUnauthorized ", 401)
}

func (o *StopComponentUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewStopComponentNotFound creates a StopComponentNotFound with default headers values
func NewStopComponentNotFound() *StopComponentNotFound {
	return &StopComponentNotFound{}
}

/*
StopComponentNotFound describes a response with status code 404, with default header values.

Not found
*/
type StopComponentNotFound struct {
}

// IsSuccess returns true when this stop component not found response has a 2xx status code
func (o *StopComponentNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this stop component not found response has a 3xx status code
func (o *StopComponentNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this stop component not found response has a 4xx status code
func (o *StopComponentNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this stop component not found response has a 5xx status code
func (o *StopComponentNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this stop component not found response a status code equal to that given
func (o *StopComponentNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the stop component not found response
func (o *StopComponentNotFound) Code() int {
	return 404
}

func (o *StopComponentNotFound) Error() string {
	return fmt.Sprintf("[POST /applications/{appName}/environments/{envName}/components/{componentName}/stop][%d] stopComponentNotFound ", 404)
}

func (o *StopComponentNotFound) String() string {
	return fmt.Sprintf("[POST /applications/{appName}/environments/{envName}/components/{componentName}/stop][%d] stopComponentNotFound ", 404)
}

func (o *StopComponentNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
