// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// EnvironmentVulnerabilities EnvironmentVulnerabilities holds vulnerability scan summaries for components and jobs
//
// swagger:model EnvironmentVulnerabilities
type EnvironmentVulnerabilities struct {

	// Name of environment
	// Example: dev
	// Required: true
	Name *string `json:"name"`

	// components
	Components ComponentVulnerabilities `json:"components,omitempty"`

	// jobs
	Jobs ComponentVulnerabilities `json:"jobs,omitempty"`
}

// Validate validates this environment vulnerabilities
func (m *EnvironmentVulnerabilities) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateComponents(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateJobs(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *EnvironmentVulnerabilities) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *EnvironmentVulnerabilities) validateComponents(formats strfmt.Registry) error {
	if swag.IsZero(m.Components) { // not required
		return nil
	}

	if m.Components != nil {
		if err := m.Components.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("components")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("components")
			}
			return err
		}
	}

	return nil
}

func (m *EnvironmentVulnerabilities) validateJobs(formats strfmt.Registry) error {
	if swag.IsZero(m.Jobs) { // not required
		return nil
	}

	if m.Jobs != nil {
		if err := m.Jobs.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("jobs")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("jobs")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this environment vulnerabilities based on the context it is used
func (m *EnvironmentVulnerabilities) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateComponents(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateJobs(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *EnvironmentVulnerabilities) contextValidateComponents(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.Components) { // not required
		return nil
	}

	if err := m.Components.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("components")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("components")
		}
		return err
	}

	return nil
}

func (m *EnvironmentVulnerabilities) contextValidateJobs(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.Jobs) { // not required
		return nil
	}

	if err := m.Jobs.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("jobs")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("jobs")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *EnvironmentVulnerabilities) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *EnvironmentVulnerabilities) UnmarshalBinary(b []byte) error {
	var res EnvironmentVulnerabilities
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
