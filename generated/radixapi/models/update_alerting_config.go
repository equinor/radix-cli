// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UpdateAlertingConfig UpdateAlertingConfig contains fields for updating alert settings
//
// swagger:model UpdateAlertingConfig
type UpdateAlertingConfig struct {

	// alerts
	// Required: true
	Alerts AlertConfigList `json:"alerts"`

	// receiver secrets
	// Required: true
	ReceiverSecrets UpdateReceiverConfigSecretsMap `json:"receiverSecrets"`

	// receivers
	// Required: true
	Receivers ReceiverConfigMap `json:"receivers"`
}

// Validate validates this update alerting config
func (m *UpdateAlertingConfig) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAlerts(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReceiverSecrets(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReceivers(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UpdateAlertingConfig) validateAlerts(formats strfmt.Registry) error {

	if err := validate.Required("alerts", "body", m.Alerts); err != nil {
		return err
	}

	if err := m.Alerts.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("alerts")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("alerts")
		}
		return err
	}

	return nil
}

func (m *UpdateAlertingConfig) validateReceiverSecrets(formats strfmt.Registry) error {

	if err := validate.Required("receiverSecrets", "body", m.ReceiverSecrets); err != nil {
		return err
	}

	if m.ReceiverSecrets != nil {
		if err := m.ReceiverSecrets.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("receiverSecrets")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("receiverSecrets")
			}
			return err
		}
	}

	return nil
}

func (m *UpdateAlertingConfig) validateReceivers(formats strfmt.Registry) error {

	if err := validate.Required("receivers", "body", m.Receivers); err != nil {
		return err
	}

	if m.Receivers != nil {
		if err := m.Receivers.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("receivers")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("receivers")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this update alerting config based on the context it is used
func (m *UpdateAlertingConfig) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAlerts(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateReceiverSecrets(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateReceivers(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UpdateAlertingConfig) contextValidateAlerts(ctx context.Context, formats strfmt.Registry) error {

	if err := m.Alerts.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("alerts")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("alerts")
		}
		return err
	}

	return nil
}

func (m *UpdateAlertingConfig) contextValidateReceiverSecrets(ctx context.Context, formats strfmt.Registry) error {

	if err := m.ReceiverSecrets.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("receiverSecrets")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("receiverSecrets")
		}
		return err
	}

	return nil
}

func (m *UpdateAlertingConfig) contextValidateReceivers(ctx context.Context, formats strfmt.Registry) error {

	if err := m.Receivers.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("receivers")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("receivers")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *UpdateAlertingConfig) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UpdateAlertingConfig) UnmarshalBinary(b []byte) error {
	var res UpdateAlertingConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
