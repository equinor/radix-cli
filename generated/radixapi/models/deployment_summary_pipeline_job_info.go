// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DeploymentSummaryPipelineJobInfo deployment summary pipeline job info
//
// swagger:model DeploymentSummaryPipelineJobInfo
type DeploymentSummaryPipelineJobInfo struct {

	// Name of the branch used to build the deployment
	// Example: main
	BuiltFromBranch string `json:"builtFromBranch,omitempty"`

	// CommitID the commit ID of the branch to build
	// Example: 4faca8595c5283a9d0f17a623b9255a0d9866a2e
	CommitID string `json:"commitID,omitempty"`

	// Name of job creating deployment
	CreatedByJob string `json:"createdByJob,omitempty"`

	// GitRef Branch or tag to build from
	// Example: master
	GitRef string `json:"gitRef,omitempty"`

	// GitRefType When the pipeline job should be built from branch or tag specified in GitRef:
	// branch
	// tag
	// <empty> - either branch or tag
	//
	// required false
	// Example: \"branch\
	// Enum: ["branch","tag","\"\""]
	GitRefType string `json:"gitRefType,omitempty"`

	// Type of pipeline job
	// Example: build-deploy
	// Enum: ["build","build-deploy","promote","deploy","apply-config"]
	PipelineJobType string `json:"pipelineJobType,omitempty"`

	// Name of the environment the deployment was promoted from
	// Applies only for pipeline jobs of type 'promote'
	// Example: qa
	PromotedFromEnvironment string `json:"promotedFromEnvironment,omitempty"`
}

// Validate validates this deployment summary pipeline job info
func (m *DeploymentSummaryPipelineJobInfo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateGitRefType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePipelineJobType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var deploymentSummaryPipelineJobInfoTypeGitRefTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["branch","tag","\"\""]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		deploymentSummaryPipelineJobInfoTypeGitRefTypePropEnum = append(deploymentSummaryPipelineJobInfoTypeGitRefTypePropEnum, v)
	}
}

const (

	// DeploymentSummaryPipelineJobInfoGitRefTypeBranch captures enum value "branch"
	DeploymentSummaryPipelineJobInfoGitRefTypeBranch string = "branch"

	// DeploymentSummaryPipelineJobInfoGitRefTypeTag captures enum value "tag"
	DeploymentSummaryPipelineJobInfoGitRefTypeTag string = "tag"

	// DeploymentSummaryPipelineJobInfoGitRefType captures enum value "\"\""
	DeploymentSummaryPipelineJobInfoGitRefType string = "\"\""
)

// prop value enum
func (m *DeploymentSummaryPipelineJobInfo) validateGitRefTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, deploymentSummaryPipelineJobInfoTypeGitRefTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *DeploymentSummaryPipelineJobInfo) validateGitRefType(formats strfmt.Registry) error {
	if swag.IsZero(m.GitRefType) { // not required
		return nil
	}

	// value enum
	if err := m.validateGitRefTypeEnum("gitRefType", "body", m.GitRefType); err != nil {
		return err
	}

	return nil
}

var deploymentSummaryPipelineJobInfoTypePipelineJobTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["build","build-deploy","promote","deploy","apply-config"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		deploymentSummaryPipelineJobInfoTypePipelineJobTypePropEnum = append(deploymentSummaryPipelineJobInfoTypePipelineJobTypePropEnum, v)
	}
}

const (

	// DeploymentSummaryPipelineJobInfoPipelineJobTypeBuild captures enum value "build"
	DeploymentSummaryPipelineJobInfoPipelineJobTypeBuild string = "build"

	// DeploymentSummaryPipelineJobInfoPipelineJobTypeBuildDashDeploy captures enum value "build-deploy"
	DeploymentSummaryPipelineJobInfoPipelineJobTypeBuildDashDeploy string = "build-deploy"

	// DeploymentSummaryPipelineJobInfoPipelineJobTypePromote captures enum value "promote"
	DeploymentSummaryPipelineJobInfoPipelineJobTypePromote string = "promote"

	// DeploymentSummaryPipelineJobInfoPipelineJobTypeDeploy captures enum value "deploy"
	DeploymentSummaryPipelineJobInfoPipelineJobTypeDeploy string = "deploy"

	// DeploymentSummaryPipelineJobInfoPipelineJobTypeApplyDashConfig captures enum value "apply-config"
	DeploymentSummaryPipelineJobInfoPipelineJobTypeApplyDashConfig string = "apply-config"
)

// prop value enum
func (m *DeploymentSummaryPipelineJobInfo) validatePipelineJobTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, deploymentSummaryPipelineJobInfoTypePipelineJobTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *DeploymentSummaryPipelineJobInfo) validatePipelineJobType(formats strfmt.Registry) error {
	if swag.IsZero(m.PipelineJobType) { // not required
		return nil
	}

	// value enum
	if err := m.validatePipelineJobTypeEnum("pipelineJobType", "body", m.PipelineJobType); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this deployment summary pipeline job info based on context it is used
func (m *DeploymentSummaryPipelineJobInfo) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *DeploymentSummaryPipelineJobInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DeploymentSummaryPipelineJobInfo) UnmarshalBinary(b []byte) error {
	var res DeploymentSummaryPipelineJobInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
