// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// OAuth2AuxiliaryResource o auth2 auxiliary resource
//
// swagger:model OAuth2AuxiliaryResource
type OAuth2AuxiliaryResource struct {

	// Deployments describes the underlying Kubernetes deployments for the resource
	Deployments []*AuxiliaryResourceDeployment `json:"deployments"`

	// SessionStoreType type of session store
	// Enum: ["cookie","redis","systemManaged","\"\""]
	SessionStoreType string `json:"sessionStoreType,omitempty"`

	// deployment
	// Required: true
	Deployment *AuxiliaryResourceDeployment `json:"deployment"`

	// identity
	Identity *Identity `json:"identity,omitempty"`
}

// Validate validates this o auth2 auxiliary resource
func (m *OAuth2AuxiliaryResource) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDeployments(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSessionStoreType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDeployment(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIdentity(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OAuth2AuxiliaryResource) validateDeployments(formats strfmt.Registry) error {
	if swag.IsZero(m.Deployments) { // not required
		return nil
	}

	for i := 0; i < len(m.Deployments); i++ {
		if swag.IsZero(m.Deployments[i]) { // not required
			continue
		}

		if m.Deployments[i] != nil {
			if err := m.Deployments[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("deployments" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("deployments" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var oAuth2AuxiliaryResourceTypeSessionStoreTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["cookie","redis","systemManaged","\"\""]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		oAuth2AuxiliaryResourceTypeSessionStoreTypePropEnum = append(oAuth2AuxiliaryResourceTypeSessionStoreTypePropEnum, v)
	}
}

const (

	// OAuth2AuxiliaryResourceSessionStoreTypeCookie captures enum value "cookie"
	OAuth2AuxiliaryResourceSessionStoreTypeCookie string = "cookie"

	// OAuth2AuxiliaryResourceSessionStoreTypeRedis captures enum value "redis"
	OAuth2AuxiliaryResourceSessionStoreTypeRedis string = "redis"

	// OAuth2AuxiliaryResourceSessionStoreTypeSystemManaged captures enum value "systemManaged"
	OAuth2AuxiliaryResourceSessionStoreTypeSystemManaged string = "systemManaged"

	// OAuth2AuxiliaryResourceSessionStoreType captures enum value "\"\""
	OAuth2AuxiliaryResourceSessionStoreType string = "\"\""
)

// prop value enum
func (m *OAuth2AuxiliaryResource) validateSessionStoreTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, oAuth2AuxiliaryResourceTypeSessionStoreTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *OAuth2AuxiliaryResource) validateSessionStoreType(formats strfmt.Registry) error {
	if swag.IsZero(m.SessionStoreType) { // not required
		return nil
	}

	// value enum
	if err := m.validateSessionStoreTypeEnum("sessionStoreType", "body", m.SessionStoreType); err != nil {
		return err
	}

	return nil
}

func (m *OAuth2AuxiliaryResource) validateDeployment(formats strfmt.Registry) error {

	if err := validate.Required("deployment", "body", m.Deployment); err != nil {
		return err
	}

	if m.Deployment != nil {
		if err := m.Deployment.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("deployment")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("deployment")
			}
			return err
		}
	}

	return nil
}

func (m *OAuth2AuxiliaryResource) validateIdentity(formats strfmt.Registry) error {
	if swag.IsZero(m.Identity) { // not required
		return nil
	}

	if m.Identity != nil {
		if err := m.Identity.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("identity")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("identity")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this o auth2 auxiliary resource based on the context it is used
func (m *OAuth2AuxiliaryResource) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDeployments(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDeployment(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateIdentity(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OAuth2AuxiliaryResource) contextValidateDeployments(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Deployments); i++ {

		if m.Deployments[i] != nil {

			if swag.IsZero(m.Deployments[i]) { // not required
				return nil
			}

			if err := m.Deployments[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("deployments" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("deployments" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *OAuth2AuxiliaryResource) contextValidateDeployment(ctx context.Context, formats strfmt.Registry) error {

	if m.Deployment != nil {

		if err := m.Deployment.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("deployment")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("deployment")
			}
			return err
		}
	}

	return nil
}

func (m *OAuth2AuxiliaryResource) contextValidateIdentity(ctx context.Context, formats strfmt.Registry) error {

	if m.Identity != nil {

		if swag.IsZero(m.Identity) { // not required
			return nil
		}

		if err := m.Identity.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("identity")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("identity")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *OAuth2AuxiliaryResource) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OAuth2AuxiliaryResource) UnmarshalBinary(b []byte) error {
	var res OAuth2AuxiliaryResource
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
