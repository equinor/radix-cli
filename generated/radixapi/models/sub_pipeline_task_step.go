// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SubPipelineTaskStep SubPipelineTaskStep holds general information about subpipeline task step
//
// swagger:model SubPipelineTaskStep
type SubPipelineTaskStep struct {

	// Environment of the pipeline run
	// Required: true
	Environment *string `json:"environment"`

	// KubeName Name of the pipeline run in the namespace
	// Example: radix-tekton-task-dev-2022-05-09-abcde
	// Required: true
	KubeName *string `json:"kubeName"`

	// Name of the step
	// Example: step-abc
	// Required: true
	Name *string `json:"name"`

	// PipelineName of the task
	// Required: true
	PipelineName *string `json:"pipelineName"`

	// PipelineRunName of the task
	// Required: true
	PipelineRunName *string `json:"pipelineRunName"`

	// Status of the step
	// Example: Waiting
	// Enum: ["Starting","Started","Running","Succeeded","Failed","Waiting","ToBeRetried","TaskRunCancelled","TaskRunTimeout","ResolvingTaskRef","ResolvingStepActionRef","TaskRunImagePullFailed","TaskRunResultLargerThanAllowedLimit","TaskRunStopSidecarFailed","InvalidParamValue","TaskRunResolutionFailed","TaskRunValidationFailedTaskValidationFailed","ResourceVerificationFailed","FailureIgnored","Error"]
	Status string `json:"status,omitempty"`

	// TaskName of the task
	// Example: task-abc
	// Required: true
	TaskName *string `json:"taskName"`
}

// Validate validates this sub pipeline task step
func (m *SubPipelineTaskStep) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEnvironment(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateKubeName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePipelineName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePipelineRunName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTaskName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SubPipelineTaskStep) validateEnvironment(formats strfmt.Registry) error {

	if err := validate.Required("environment", "body", m.Environment); err != nil {
		return err
	}

	return nil
}

func (m *SubPipelineTaskStep) validateKubeName(formats strfmt.Registry) error {

	if err := validate.Required("kubeName", "body", m.KubeName); err != nil {
		return err
	}

	return nil
}

func (m *SubPipelineTaskStep) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *SubPipelineTaskStep) validatePipelineName(formats strfmt.Registry) error {

	if err := validate.Required("pipelineName", "body", m.PipelineName); err != nil {
		return err
	}

	return nil
}

func (m *SubPipelineTaskStep) validatePipelineRunName(formats strfmt.Registry) error {

	if err := validate.Required("pipelineRunName", "body", m.PipelineRunName); err != nil {
		return err
	}

	return nil
}

var subPipelineTaskStepTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Starting","Started","Running","Succeeded","Failed","Waiting","ToBeRetried","TaskRunCancelled","TaskRunTimeout","ResolvingTaskRef","ResolvingStepActionRef","TaskRunImagePullFailed","TaskRunResultLargerThanAllowedLimit","TaskRunStopSidecarFailed","InvalidParamValue","TaskRunResolutionFailed","TaskRunValidationFailedTaskValidationFailed","ResourceVerificationFailed","FailureIgnored","Error"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		subPipelineTaskStepTypeStatusPropEnum = append(subPipelineTaskStepTypeStatusPropEnum, v)
	}
}

const (

	// SubPipelineTaskStepStatusStarting captures enum value "Starting"
	SubPipelineTaskStepStatusStarting string = "Starting"

	// SubPipelineTaskStepStatusStarted captures enum value "Started"
	SubPipelineTaskStepStatusStarted string = "Started"

	// SubPipelineTaskStepStatusRunning captures enum value "Running"
	SubPipelineTaskStepStatusRunning string = "Running"

	// SubPipelineTaskStepStatusSucceeded captures enum value "Succeeded"
	SubPipelineTaskStepStatusSucceeded string = "Succeeded"

	// SubPipelineTaskStepStatusFailed captures enum value "Failed"
	SubPipelineTaskStepStatusFailed string = "Failed"

	// SubPipelineTaskStepStatusWaiting captures enum value "Waiting"
	SubPipelineTaskStepStatusWaiting string = "Waiting"

	// SubPipelineTaskStepStatusToBeRetried captures enum value "ToBeRetried"
	SubPipelineTaskStepStatusToBeRetried string = "ToBeRetried"

	// SubPipelineTaskStepStatusTaskRunCancelled captures enum value "TaskRunCancelled"
	SubPipelineTaskStepStatusTaskRunCancelled string = "TaskRunCancelled"

	// SubPipelineTaskStepStatusTaskRunTimeout captures enum value "TaskRunTimeout"
	SubPipelineTaskStepStatusTaskRunTimeout string = "TaskRunTimeout"

	// SubPipelineTaskStepStatusResolvingTaskRef captures enum value "ResolvingTaskRef"
	SubPipelineTaskStepStatusResolvingTaskRef string = "ResolvingTaskRef"

	// SubPipelineTaskStepStatusResolvingStepActionRef captures enum value "ResolvingStepActionRef"
	SubPipelineTaskStepStatusResolvingStepActionRef string = "ResolvingStepActionRef"

	// SubPipelineTaskStepStatusTaskRunImagePullFailed captures enum value "TaskRunImagePullFailed"
	SubPipelineTaskStepStatusTaskRunImagePullFailed string = "TaskRunImagePullFailed"

	// SubPipelineTaskStepStatusTaskRunResultLargerThanAllowedLimit captures enum value "TaskRunResultLargerThanAllowedLimit"
	SubPipelineTaskStepStatusTaskRunResultLargerThanAllowedLimit string = "TaskRunResultLargerThanAllowedLimit"

	// SubPipelineTaskStepStatusTaskRunStopSidecarFailed captures enum value "TaskRunStopSidecarFailed"
	SubPipelineTaskStepStatusTaskRunStopSidecarFailed string = "TaskRunStopSidecarFailed"

	// SubPipelineTaskStepStatusInvalidParamValue captures enum value "InvalidParamValue"
	SubPipelineTaskStepStatusInvalidParamValue string = "InvalidParamValue"

	// SubPipelineTaskStepStatusTaskRunResolutionFailed captures enum value "TaskRunResolutionFailed"
	SubPipelineTaskStepStatusTaskRunResolutionFailed string = "TaskRunResolutionFailed"

	// SubPipelineTaskStepStatusTaskRunValidationFailedTaskValidationFailed captures enum value "TaskRunValidationFailedTaskValidationFailed"
	SubPipelineTaskStepStatusTaskRunValidationFailedTaskValidationFailed string = "TaskRunValidationFailedTaskValidationFailed"

	// SubPipelineTaskStepStatusResourceVerificationFailed captures enum value "ResourceVerificationFailed"
	SubPipelineTaskStepStatusResourceVerificationFailed string = "ResourceVerificationFailed"

	// SubPipelineTaskStepStatusFailureIgnored captures enum value "FailureIgnored"
	SubPipelineTaskStepStatusFailureIgnored string = "FailureIgnored"

	// SubPipelineTaskStepStatusError captures enum value "Error"
	SubPipelineTaskStepStatusError string = "Error"
)

// prop value enum
func (m *SubPipelineTaskStep) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, subPipelineTaskStepTypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *SubPipelineTaskStep) validateStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

func (m *SubPipelineTaskStep) validateTaskName(formats strfmt.Registry) error {

	if err := validate.Required("taskName", "body", m.TaskName); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this sub pipeline task step based on context it is used
func (m *SubPipelineTaskStep) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *SubPipelineTaskStep) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SubPipelineTaskStep) UnmarshalBinary(b []byte) error {
	var res SubPipelineTaskStep
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
