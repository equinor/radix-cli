// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SubPipelineTaskStep SubPipelineTaskStep holds general information about subpipeline task step
//
// swagger:model SubPipelineTaskStep
type SubPipelineTaskStep struct {

	// Environment of the pipeline run
	// Required: true
	Environment *string `json:"environment"`

	// KubeName Name of the pipeline run in the namespace
	// Example: radix-tekton-task-dev-2022-05-09-abcde
	// Required: true
	KubeName *string `json:"kubeName"`

	// Name of the step
	// Example: step-abc
	// Required: true
	Name *string `json:"name"`

	// PipelineName of the task
	// Required: true
	PipelineName *string `json:"pipelineName"`

	// PipelineRunName of the task
	// Required: true
	PipelineRunName *string `json:"pipelineRunName"`

	// TaskName of the task
	// Example: task-abc
	// Required: true
	TaskName *string `json:"taskName"`
}

// Validate validates this sub pipeline task step
func (m *SubPipelineTaskStep) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEnvironment(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateKubeName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePipelineName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePipelineRunName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTaskName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SubPipelineTaskStep) validateEnvironment(formats strfmt.Registry) error {

	if err := validate.Required("environment", "body", m.Environment); err != nil {
		return err
	}

	return nil
}

func (m *SubPipelineTaskStep) validateKubeName(formats strfmt.Registry) error {

	if err := validate.Required("kubeName", "body", m.KubeName); err != nil {
		return err
	}

	return nil
}

func (m *SubPipelineTaskStep) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *SubPipelineTaskStep) validatePipelineName(formats strfmt.Registry) error {

	if err := validate.Required("pipelineName", "body", m.PipelineName); err != nil {
		return err
	}

	return nil
}

func (m *SubPipelineTaskStep) validatePipelineRunName(formats strfmt.Registry) error {

	if err := validate.Required("pipelineRunName", "body", m.PipelineRunName); err != nil {
		return err
	}

	return nil
}

func (m *SubPipelineTaskStep) validateTaskName(formats strfmt.Registry) error {

	if err := validate.Required("taskName", "body", m.TaskName); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this sub pipeline task step based on context it is used
func (m *SubPipelineTaskStep) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *SubPipelineTaskStep) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SubPipelineTaskStep) UnmarshalBinary(b []byte) error {
	var res SubPipelineTaskStep
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
