// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SecretParameters SecretParameters describes a component secret
//
// swagger:model SecretParameters
type SecretParameters struct {

	// Name the unique name of the Radix application deployment
	// Example: p4$sW0rDz
	// Required: true
	SecretValue *string `json:"secretValue"`

	// Type of the secret
	// generic SecretTypeGeneric
	// azure-blob-fuse-volume SecretTypeAzureBlobFuseVolume
	// csi-azure-blob-volume SecretTypeCsiAzureBlobVolume
	// csi-azure-key-vault-creds SecretTypeCsiAzureKeyVaultCreds
	// csi-azure-key-vault-item SecretTypeCsiAzureKeyVaultItem
	// client-cert-auth SecretTypeClientCertificateAuth
	// oauth2-proxy SecretTypeOAuth2Proxy
	// Example: azure-blob-fuse-volume
	// Enum: ["generic","azure-blob-fuse-volume","csi-azure-blob-volume","csi-azure-key-vault-creds","csi-azure-key-vault-item","client-cert-auth","oauth2-proxy"]
	Type string `json:"type,omitempty"`
}

// Validate validates this secret parameters
func (m *SecretParameters) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateSecretValue(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SecretParameters) validateSecretValue(formats strfmt.Registry) error {

	if err := validate.Required("secretValue", "body", m.SecretValue); err != nil {
		return err
	}

	return nil
}

var secretParametersTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["generic","azure-blob-fuse-volume","csi-azure-blob-volume","csi-azure-key-vault-creds","csi-azure-key-vault-item","client-cert-auth","oauth2-proxy"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		secretParametersTypeTypePropEnum = append(secretParametersTypeTypePropEnum, v)
	}
}

const (

	// SecretParametersTypeGeneric captures enum value "generic"
	SecretParametersTypeGeneric string = "generic"

	// SecretParametersTypeAzureDashBlobDashFuseDashVolume captures enum value "azure-blob-fuse-volume"
	SecretParametersTypeAzureDashBlobDashFuseDashVolume string = "azure-blob-fuse-volume"

	// SecretParametersTypeCsiDashAzureDashBlobDashVolume captures enum value "csi-azure-blob-volume"
	SecretParametersTypeCsiDashAzureDashBlobDashVolume string = "csi-azure-blob-volume"

	// SecretParametersTypeCsiDashAzureDashKeyDashVaultDashCreds captures enum value "csi-azure-key-vault-creds"
	SecretParametersTypeCsiDashAzureDashKeyDashVaultDashCreds string = "csi-azure-key-vault-creds"

	// SecretParametersTypeCsiDashAzureDashKeyDashVaultDashItem captures enum value "csi-azure-key-vault-item"
	SecretParametersTypeCsiDashAzureDashKeyDashVaultDashItem string = "csi-azure-key-vault-item"

	// SecretParametersTypeClientDashCertDashAuth captures enum value "client-cert-auth"
	SecretParametersTypeClientDashCertDashAuth string = "client-cert-auth"

	// SecretParametersTypeOauth2DashProxy captures enum value "oauth2-proxy"
	SecretParametersTypeOauth2DashProxy string = "oauth2-proxy"
)

// prop value enum
func (m *SecretParameters) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, secretParametersTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *SecretParameters) validateType(formats strfmt.Registry) error {
	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this secret parameters based on context it is used
func (m *SecretParameters) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *SecretParameters) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SecretParameters) UnmarshalBinary(b []byte) error {
	var res SecretParameters
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
