// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UpdateExternalDNSTLSRequest UpdateExternalDNSTLSRequest describes request body for setting private key and certificate for external DNS TLS
//
// swagger:model UpdateExternalDNSTLSRequest
type UpdateExternalDNSTLSRequest struct {

	// X509 certificate in PEM format
	// Required: true
	Certificate *string `json:"certificate"`

	// Private key in PEM format
	// Required: true
	PrivateKey *string `json:"privateKey"`

	// Skip validation of certificate and private key
	SkipValidation bool `json:"skipValidation,omitempty"`
}

// Validate validates this update external DNS TLS request
func (m *UpdateExternalDNSTLSRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCertificate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePrivateKey(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UpdateExternalDNSTLSRequest) validateCertificate(formats strfmt.Registry) error {

	if err := validate.Required("certificate", "body", m.Certificate); err != nil {
		return err
	}

	return nil
}

func (m *UpdateExternalDNSTLSRequest) validatePrivateKey(formats strfmt.Registry) error {

	if err := validate.Required("privateKey", "body", m.PrivateKey); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this update external DNS TLS request based on context it is used
func (m *UpdateExternalDNSTLSRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *UpdateExternalDNSTLSRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UpdateExternalDNSTLSRequest) UnmarshalBinary(b []byte) error {
	var res UpdateExternalDNSTLSRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
