// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// IngressPublic IngressPublic describes public ingress configuration for a component
//
// swagger:model IngressPublic
type IngressPublic struct {

	// List of allowed IP addresses or CIDRs. All traffic is allowed if list is empty.
	// Required: true
	Allow []string `json:"allow"`
}

// Validate validates this ingress public
func (m *IngressPublic) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAllow(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IngressPublic) validateAllow(formats strfmt.Registry) error {

	if err := validate.Required("allow", "body", m.Allow); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this ingress public based on context it is used
func (m *IngressPublic) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *IngressPublic) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IngressPublic) UnmarshalBinary(b []byte) error {
	var res IngressPublic
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
