// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PipelineParametersBuild PipelineParametersBuild describe branch to build and its commit ID
//
// swagger:model PipelineParametersBuild
type PipelineParametersBuild struct {

	// Deprecated: use GitRef instead
	// Branch the branch to build
	// REQUIRED for "build" and "build-deploy" pipelines
	// Example: master
	Branch string `json:"branch,omitempty"`

	// CommitID the commit ID of the branch to build
	// REQUIRED for "build" and "build-deploy" pipelines
	// Example: 4faca8595c5283a9d0f17a623b9255a0d9866a2e
	CommitID string `json:"commitID,omitempty"`

	// DeployExternalDNS deploy external DNS
	DeployExternalDNS *bool `json:"deployExternalDNS,omitempty"`

	// GitRef Branch or tag to build from
	// REQUIRED for "build" and "build-deploy" pipelines
	// Example: master
	GitRef string `json:"gitRef,omitempty"`

	// GitRefType When the pipeline job should be built from branch or tag specified in GitRef:
	// branch
	// tag
	// <empty> - either branch or tag
	//
	// required false
	// Example: \"branch\
	// Enum: ["branch","tag","\"\""]
	GitRefType string `json:"gitRefType,omitempty"`

	// ImageName of the component, without repository name and image-tag
	// Example: radix-component
	ImageName string `json:"imageName,omitempty"`

	// ImageRepository of the component, without image name and image-tag
	// Example: ghcr.io/test
	ImageRepository string `json:"imageRepository,omitempty"`

	// ImageTag of the image - if empty will use default logic
	// Example: master-latest
	ImageTag string `json:"imageTag,omitempty"`

	// OverrideUseBuildCache override default or configured build cache option
	OverrideUseBuildCache *bool `json:"overrideUseBuildCache,omitempty"`

	// PushImage should image be pushed to container registry. Defaults pushing
	// Example: true
	PushImage string `json:"pushImage,omitempty"`

	// RefreshBuildCache forces to rebuild cache when UseBuildCache is true in the RadixApplication or OverrideUseBuildCache is true
	RefreshBuildCache *bool `json:"refreshBuildCache,omitempty"`

	// Name of environment to build for
	// Example: prod
	ToEnvironment string `json:"toEnvironment,omitempty"`

	// TriggeredBy of the job - if empty will use user token upn (user principle name)
	// Example: a_user@equinor.com
	TriggeredBy string `json:"triggeredBy,omitempty"`
}

// Validate validates this pipeline parameters build
func (m *PipelineParametersBuild) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateGitRefType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var pipelineParametersBuildTypeGitRefTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["branch","tag","\"\""]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		pipelineParametersBuildTypeGitRefTypePropEnum = append(pipelineParametersBuildTypeGitRefTypePropEnum, v)
	}
}

const (

	// PipelineParametersBuildGitRefTypeBranch captures enum value "branch"
	PipelineParametersBuildGitRefTypeBranch string = "branch"

	// PipelineParametersBuildGitRefTypeTag captures enum value "tag"
	PipelineParametersBuildGitRefTypeTag string = "tag"

	// PipelineParametersBuildGitRefType captures enum value "\"\""
	PipelineParametersBuildGitRefType string = "\"\""
)

// prop value enum
func (m *PipelineParametersBuild) validateGitRefTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, pipelineParametersBuildTypeGitRefTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *PipelineParametersBuild) validateGitRefType(formats strfmt.Registry) error {
	if swag.IsZero(m.GitRefType) { // not required
		return nil
	}

	// value enum
	if err := m.validateGitRefTypeEnum("gitRefType", "body", m.GitRefType); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this pipeline parameters build based on context it is used
func (m *PipelineParametersBuild) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *PipelineParametersBuild) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PipelineParametersBuild) UnmarshalBinary(b []byte) error {
	var res PipelineParametersBuild
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
