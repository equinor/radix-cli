// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ReplicaUtilization replica utilization
//
// swagger:model ReplicaUtilization
type ReplicaUtilization struct {

	// Average CPU Used
	// Required: true
	CPUAverage *float64 `json:"cpuAverage"`

	// Cpu Requests
	// Required: true
	CPURequests *float64 `json:"cpuRequests"`

	// Max memory used
	// Required: true
	MemoryMaximum *float64 `json:"memoryMaximum"`

	// Memory Requests
	// Required: true
	MemoryRequests *float64 `json:"memoryRequests"`
}

// Validate validates this replica utilization
func (m *ReplicaUtilization) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCPUAverage(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCPURequests(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMemoryMaximum(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMemoryRequests(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ReplicaUtilization) validateCPUAverage(formats strfmt.Registry) error {

	if err := validate.Required("cpuAverage", "body", m.CPUAverage); err != nil {
		return err
	}

	return nil
}

func (m *ReplicaUtilization) validateCPURequests(formats strfmt.Registry) error {

	if err := validate.Required("cpuRequests", "body", m.CPURequests); err != nil {
		return err
	}

	return nil
}

func (m *ReplicaUtilization) validateMemoryMaximum(formats strfmt.Registry) error {

	if err := validate.Required("memoryMaximum", "body", m.MemoryMaximum); err != nil {
		return err
	}

	return nil
}

func (m *ReplicaUtilization) validateMemoryRequests(formats strfmt.Registry) error {

	if err := validate.Required("memoryRequests", "body", m.MemoryRequests); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this replica utilization based on context it is used
func (m *ReplicaUtilization) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ReplicaUtilization) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ReplicaUtilization) UnmarshalBinary(b []byte) error {
	var res ReplicaUtilization
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
