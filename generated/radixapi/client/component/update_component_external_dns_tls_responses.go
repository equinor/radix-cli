// Code generated by go-swagger; DO NOT EDIT.

package component

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// UpdateComponentExternalDNSTLSReader is a Reader for the UpdateComponentExternalDNSTLS structure.
type UpdateComponentExternalDNSTLSReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateComponentExternalDNSTLSReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateComponentExternalDNSTLSOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdateComponentExternalDNSTLSBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewUpdateComponentExternalDNSTLSUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewUpdateComponentExternalDNSTLSForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdateComponentExternalDNSTLSNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewUpdateComponentExternalDNSTLSConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewUpdateComponentExternalDNSTLSInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PUT /applications/{appName}/environments/{envName}/components/{componentName}/externaldns/{fqdn}/tls] updateComponentExternalDnsTls", response, response.Code())
	}
}

// NewUpdateComponentExternalDNSTLSOK creates a UpdateComponentExternalDNSTLSOK with default headers values
func NewUpdateComponentExternalDNSTLSOK() *UpdateComponentExternalDNSTLSOK {
	return &UpdateComponentExternalDNSTLSOK{}
}

/*
UpdateComponentExternalDNSTLSOK describes a response with status code 200, with default header values.

success
*/
type UpdateComponentExternalDNSTLSOK struct {
}

// IsSuccess returns true when this update component external Dns Tls o k response has a 2xx status code
func (o *UpdateComponentExternalDNSTLSOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update component external Dns Tls o k response has a 3xx status code
func (o *UpdateComponentExternalDNSTLSOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update component external Dns Tls o k response has a 4xx status code
func (o *UpdateComponentExternalDNSTLSOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this update component external Dns Tls o k response has a 5xx status code
func (o *UpdateComponentExternalDNSTLSOK) IsServerError() bool {
	return false
}

// IsCode returns true when this update component external Dns Tls o k response a status code equal to that given
func (o *UpdateComponentExternalDNSTLSOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the update component external Dns Tls o k response
func (o *UpdateComponentExternalDNSTLSOK) Code() int {
	return 200
}

func (o *UpdateComponentExternalDNSTLSOK) Error() string {
	return fmt.Sprintf("[PUT /applications/{appName}/environments/{envName}/components/{componentName}/externaldns/{fqdn}/tls][%d] updateComponentExternalDnsTlsOK", 200)
}

func (o *UpdateComponentExternalDNSTLSOK) String() string {
	return fmt.Sprintf("[PUT /applications/{appName}/environments/{envName}/components/{componentName}/externaldns/{fqdn}/tls][%d] updateComponentExternalDnsTlsOK", 200)
}

func (o *UpdateComponentExternalDNSTLSOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateComponentExternalDNSTLSBadRequest creates a UpdateComponentExternalDNSTLSBadRequest with default headers values
func NewUpdateComponentExternalDNSTLSBadRequest() *UpdateComponentExternalDNSTLSBadRequest {
	return &UpdateComponentExternalDNSTLSBadRequest{}
}

/*
UpdateComponentExternalDNSTLSBadRequest describes a response with status code 400, with default header values.

Invalid application
*/
type UpdateComponentExternalDNSTLSBadRequest struct {
}

// IsSuccess returns true when this update component external Dns Tls bad request response has a 2xx status code
func (o *UpdateComponentExternalDNSTLSBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update component external Dns Tls bad request response has a 3xx status code
func (o *UpdateComponentExternalDNSTLSBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update component external Dns Tls bad request response has a 4xx status code
func (o *UpdateComponentExternalDNSTLSBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this update component external Dns Tls bad request response has a 5xx status code
func (o *UpdateComponentExternalDNSTLSBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this update component external Dns Tls bad request response a status code equal to that given
func (o *UpdateComponentExternalDNSTLSBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the update component external Dns Tls bad request response
func (o *UpdateComponentExternalDNSTLSBadRequest) Code() int {
	return 400
}

func (o *UpdateComponentExternalDNSTLSBadRequest) Error() string {
	return fmt.Sprintf("[PUT /applications/{appName}/environments/{envName}/components/{componentName}/externaldns/{fqdn}/tls][%d] updateComponentExternalDnsTlsBadRequest", 400)
}

func (o *UpdateComponentExternalDNSTLSBadRequest) String() string {
	return fmt.Sprintf("[PUT /applications/{appName}/environments/{envName}/components/{componentName}/externaldns/{fqdn}/tls][%d] updateComponentExternalDnsTlsBadRequest", 400)
}

func (o *UpdateComponentExternalDNSTLSBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateComponentExternalDNSTLSUnauthorized creates a UpdateComponentExternalDNSTLSUnauthorized with default headers values
func NewUpdateComponentExternalDNSTLSUnauthorized() *UpdateComponentExternalDNSTLSUnauthorized {
	return &UpdateComponentExternalDNSTLSUnauthorized{}
}

/*
UpdateComponentExternalDNSTLSUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type UpdateComponentExternalDNSTLSUnauthorized struct {
}

// IsSuccess returns true when this update component external Dns Tls unauthorized response has a 2xx status code
func (o *UpdateComponentExternalDNSTLSUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update component external Dns Tls unauthorized response has a 3xx status code
func (o *UpdateComponentExternalDNSTLSUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update component external Dns Tls unauthorized response has a 4xx status code
func (o *UpdateComponentExternalDNSTLSUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this update component external Dns Tls unauthorized response has a 5xx status code
func (o *UpdateComponentExternalDNSTLSUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this update component external Dns Tls unauthorized response a status code equal to that given
func (o *UpdateComponentExternalDNSTLSUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the update component external Dns Tls unauthorized response
func (o *UpdateComponentExternalDNSTLSUnauthorized) Code() int {
	return 401
}

func (o *UpdateComponentExternalDNSTLSUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /applications/{appName}/environments/{envName}/components/{componentName}/externaldns/{fqdn}/tls][%d] updateComponentExternalDnsTlsUnauthorized", 401)
}

func (o *UpdateComponentExternalDNSTLSUnauthorized) String() string {
	return fmt.Sprintf("[PUT /applications/{appName}/environments/{envName}/components/{componentName}/externaldns/{fqdn}/tls][%d] updateComponentExternalDnsTlsUnauthorized", 401)
}

func (o *UpdateComponentExternalDNSTLSUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateComponentExternalDNSTLSForbidden creates a UpdateComponentExternalDNSTLSForbidden with default headers values
func NewUpdateComponentExternalDNSTLSForbidden() *UpdateComponentExternalDNSTLSForbidden {
	return &UpdateComponentExternalDNSTLSForbidden{}
}

/*
UpdateComponentExternalDNSTLSForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type UpdateComponentExternalDNSTLSForbidden struct {
}

// IsSuccess returns true when this update component external Dns Tls forbidden response has a 2xx status code
func (o *UpdateComponentExternalDNSTLSForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update component external Dns Tls forbidden response has a 3xx status code
func (o *UpdateComponentExternalDNSTLSForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update component external Dns Tls forbidden response has a 4xx status code
func (o *UpdateComponentExternalDNSTLSForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this update component external Dns Tls forbidden response has a 5xx status code
func (o *UpdateComponentExternalDNSTLSForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this update component external Dns Tls forbidden response a status code equal to that given
func (o *UpdateComponentExternalDNSTLSForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the update component external Dns Tls forbidden response
func (o *UpdateComponentExternalDNSTLSForbidden) Code() int {
	return 403
}

func (o *UpdateComponentExternalDNSTLSForbidden) Error() string {
	return fmt.Sprintf("[PUT /applications/{appName}/environments/{envName}/components/{componentName}/externaldns/{fqdn}/tls][%d] updateComponentExternalDnsTlsForbidden", 403)
}

func (o *UpdateComponentExternalDNSTLSForbidden) String() string {
	return fmt.Sprintf("[PUT /applications/{appName}/environments/{envName}/components/{componentName}/externaldns/{fqdn}/tls][%d] updateComponentExternalDnsTlsForbidden", 403)
}

func (o *UpdateComponentExternalDNSTLSForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateComponentExternalDNSTLSNotFound creates a UpdateComponentExternalDNSTLSNotFound with default headers values
func NewUpdateComponentExternalDNSTLSNotFound() *UpdateComponentExternalDNSTLSNotFound {
	return &UpdateComponentExternalDNSTLSNotFound{}
}

/*
UpdateComponentExternalDNSTLSNotFound describes a response with status code 404, with default header values.

Not found
*/
type UpdateComponentExternalDNSTLSNotFound struct {
}

// IsSuccess returns true when this update component external Dns Tls not found response has a 2xx status code
func (o *UpdateComponentExternalDNSTLSNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update component external Dns Tls not found response has a 3xx status code
func (o *UpdateComponentExternalDNSTLSNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update component external Dns Tls not found response has a 4xx status code
func (o *UpdateComponentExternalDNSTLSNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this update component external Dns Tls not found response has a 5xx status code
func (o *UpdateComponentExternalDNSTLSNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this update component external Dns Tls not found response a status code equal to that given
func (o *UpdateComponentExternalDNSTLSNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the update component external Dns Tls not found response
func (o *UpdateComponentExternalDNSTLSNotFound) Code() int {
	return 404
}

func (o *UpdateComponentExternalDNSTLSNotFound) Error() string {
	return fmt.Sprintf("[PUT /applications/{appName}/environments/{envName}/components/{componentName}/externaldns/{fqdn}/tls][%d] updateComponentExternalDnsTlsNotFound", 404)
}

func (o *UpdateComponentExternalDNSTLSNotFound) String() string {
	return fmt.Sprintf("[PUT /applications/{appName}/environments/{envName}/components/{componentName}/externaldns/{fqdn}/tls][%d] updateComponentExternalDnsTlsNotFound", 404)
}

func (o *UpdateComponentExternalDNSTLSNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateComponentExternalDNSTLSConflict creates a UpdateComponentExternalDNSTLSConflict with default headers values
func NewUpdateComponentExternalDNSTLSConflict() *UpdateComponentExternalDNSTLSConflict {
	return &UpdateComponentExternalDNSTLSConflict{}
}

/*
UpdateComponentExternalDNSTLSConflict describes a response with status code 409, with default header values.

Conflict
*/
type UpdateComponentExternalDNSTLSConflict struct {
}

// IsSuccess returns true when this update component external Dns Tls conflict response has a 2xx status code
func (o *UpdateComponentExternalDNSTLSConflict) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update component external Dns Tls conflict response has a 3xx status code
func (o *UpdateComponentExternalDNSTLSConflict) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update component external Dns Tls conflict response has a 4xx status code
func (o *UpdateComponentExternalDNSTLSConflict) IsClientError() bool {
	return true
}

// IsServerError returns true when this update component external Dns Tls conflict response has a 5xx status code
func (o *UpdateComponentExternalDNSTLSConflict) IsServerError() bool {
	return false
}

// IsCode returns true when this update component external Dns Tls conflict response a status code equal to that given
func (o *UpdateComponentExternalDNSTLSConflict) IsCode(code int) bool {
	return code == 409
}

// Code gets the status code for the update component external Dns Tls conflict response
func (o *UpdateComponentExternalDNSTLSConflict) Code() int {
	return 409
}

func (o *UpdateComponentExternalDNSTLSConflict) Error() string {
	return fmt.Sprintf("[PUT /applications/{appName}/environments/{envName}/components/{componentName}/externaldns/{fqdn}/tls][%d] updateComponentExternalDnsTlsConflict", 409)
}

func (o *UpdateComponentExternalDNSTLSConflict) String() string {
	return fmt.Sprintf("[PUT /applications/{appName}/environments/{envName}/components/{componentName}/externaldns/{fqdn}/tls][%d] updateComponentExternalDnsTlsConflict", 409)
}

func (o *UpdateComponentExternalDNSTLSConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateComponentExternalDNSTLSInternalServerError creates a UpdateComponentExternalDNSTLSInternalServerError with default headers values
func NewUpdateComponentExternalDNSTLSInternalServerError() *UpdateComponentExternalDNSTLSInternalServerError {
	return &UpdateComponentExternalDNSTLSInternalServerError{}
}

/*
UpdateComponentExternalDNSTLSInternalServerError describes a response with status code 500, with default header values.

Internal server error
*/
type UpdateComponentExternalDNSTLSInternalServerError struct {
}

// IsSuccess returns true when this update component external Dns Tls internal server error response has a 2xx status code
func (o *UpdateComponentExternalDNSTLSInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update component external Dns Tls internal server error response has a 3xx status code
func (o *UpdateComponentExternalDNSTLSInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update component external Dns Tls internal server error response has a 4xx status code
func (o *UpdateComponentExternalDNSTLSInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this update component external Dns Tls internal server error response has a 5xx status code
func (o *UpdateComponentExternalDNSTLSInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this update component external Dns Tls internal server error response a status code equal to that given
func (o *UpdateComponentExternalDNSTLSInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the update component external Dns Tls internal server error response
func (o *UpdateComponentExternalDNSTLSInternalServerError) Code() int {
	return 500
}

func (o *UpdateComponentExternalDNSTLSInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /applications/{appName}/environments/{envName}/components/{componentName}/externaldns/{fqdn}/tls][%d] updateComponentExternalDnsTlsInternalServerError", 500)
}

func (o *UpdateComponentExternalDNSTLSInternalServerError) String() string {
	return fmt.Sprintf("[PUT /applications/{appName}/environments/{envName}/components/{componentName}/externaldns/{fqdn}/tls][%d] updateComponentExternalDnsTlsInternalServerError", 500)
}

func (o *UpdateComponentExternalDNSTLSInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
