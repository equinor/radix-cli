// Code generated by go-swagger; DO NOT EDIT.

package job

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// StopAllBatchesReader is a Reader for the StopAllBatches structure.
type StopAllBatchesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *StopAllBatchesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 204:
		result := NewStopAllBatchesNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewStopAllBatchesBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewStopAllBatchesUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewStopAllBatchesForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewStopAllBatchesNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /applications/{appName}/environments/{envName}/jobcomponents/{jobComponentName}/batches/stop] stopAllBatches", response, response.Code())
	}
}

// NewStopAllBatchesNoContent creates a StopAllBatchesNoContent with default headers values
func NewStopAllBatchesNoContent() *StopAllBatchesNoContent {
	return &StopAllBatchesNoContent{}
}

/*
StopAllBatchesNoContent describes a response with status code 204, with default header values.

Success
*/
type StopAllBatchesNoContent struct {
}

// IsSuccess returns true when this stop all batches no content response has a 2xx status code
func (o *StopAllBatchesNoContent) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this stop all batches no content response has a 3xx status code
func (o *StopAllBatchesNoContent) IsRedirect() bool {
	return false
}

// IsClientError returns true when this stop all batches no content response has a 4xx status code
func (o *StopAllBatchesNoContent) IsClientError() bool {
	return false
}

// IsServerError returns true when this stop all batches no content response has a 5xx status code
func (o *StopAllBatchesNoContent) IsServerError() bool {
	return false
}

// IsCode returns true when this stop all batches no content response a status code equal to that given
func (o *StopAllBatchesNoContent) IsCode(code int) bool {
	return code == 204
}

// Code gets the status code for the stop all batches no content response
func (o *StopAllBatchesNoContent) Code() int {
	return 204
}

func (o *StopAllBatchesNoContent) Error() string {
	return fmt.Sprintf("[POST /applications/{appName}/environments/{envName}/jobcomponents/{jobComponentName}/batches/stop][%d] stopAllBatchesNoContent", 204)
}

func (o *StopAllBatchesNoContent) String() string {
	return fmt.Sprintf("[POST /applications/{appName}/environments/{envName}/jobcomponents/{jobComponentName}/batches/stop][%d] stopAllBatchesNoContent", 204)
}

func (o *StopAllBatchesNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewStopAllBatchesBadRequest creates a StopAllBatchesBadRequest with default headers values
func NewStopAllBatchesBadRequest() *StopAllBatchesBadRequest {
	return &StopAllBatchesBadRequest{}
}

/*
StopAllBatchesBadRequest describes a response with status code 400, with default header values.

Invalid batch
*/
type StopAllBatchesBadRequest struct {
}

// IsSuccess returns true when this stop all batches bad request response has a 2xx status code
func (o *StopAllBatchesBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this stop all batches bad request response has a 3xx status code
func (o *StopAllBatchesBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this stop all batches bad request response has a 4xx status code
func (o *StopAllBatchesBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this stop all batches bad request response has a 5xx status code
func (o *StopAllBatchesBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this stop all batches bad request response a status code equal to that given
func (o *StopAllBatchesBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the stop all batches bad request response
func (o *StopAllBatchesBadRequest) Code() int {
	return 400
}

func (o *StopAllBatchesBadRequest) Error() string {
	return fmt.Sprintf("[POST /applications/{appName}/environments/{envName}/jobcomponents/{jobComponentName}/batches/stop][%d] stopAllBatchesBadRequest", 400)
}

func (o *StopAllBatchesBadRequest) String() string {
	return fmt.Sprintf("[POST /applications/{appName}/environments/{envName}/jobcomponents/{jobComponentName}/batches/stop][%d] stopAllBatchesBadRequest", 400)
}

func (o *StopAllBatchesBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewStopAllBatchesUnauthorized creates a StopAllBatchesUnauthorized with default headers values
func NewStopAllBatchesUnauthorized() *StopAllBatchesUnauthorized {
	return &StopAllBatchesUnauthorized{}
}

/*
StopAllBatchesUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type StopAllBatchesUnauthorized struct {
}

// IsSuccess returns true when this stop all batches unauthorized response has a 2xx status code
func (o *StopAllBatchesUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this stop all batches unauthorized response has a 3xx status code
func (o *StopAllBatchesUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this stop all batches unauthorized response has a 4xx status code
func (o *StopAllBatchesUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this stop all batches unauthorized response has a 5xx status code
func (o *StopAllBatchesUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this stop all batches unauthorized response a status code equal to that given
func (o *StopAllBatchesUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the stop all batches unauthorized response
func (o *StopAllBatchesUnauthorized) Code() int {
	return 401
}

func (o *StopAllBatchesUnauthorized) Error() string {
	return fmt.Sprintf("[POST /applications/{appName}/environments/{envName}/jobcomponents/{jobComponentName}/batches/stop][%d] stopAllBatchesUnauthorized", 401)
}

func (o *StopAllBatchesUnauthorized) String() string {
	return fmt.Sprintf("[POST /applications/{appName}/environments/{envName}/jobcomponents/{jobComponentName}/batches/stop][%d] stopAllBatchesUnauthorized", 401)
}

func (o *StopAllBatchesUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewStopAllBatchesForbidden creates a StopAllBatchesForbidden with default headers values
func NewStopAllBatchesForbidden() *StopAllBatchesForbidden {
	return &StopAllBatchesForbidden{}
}

/*
StopAllBatchesForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type StopAllBatchesForbidden struct {
}

// IsSuccess returns true when this stop all batches forbidden response has a 2xx status code
func (o *StopAllBatchesForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this stop all batches forbidden response has a 3xx status code
func (o *StopAllBatchesForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this stop all batches forbidden response has a 4xx status code
func (o *StopAllBatchesForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this stop all batches forbidden response has a 5xx status code
func (o *StopAllBatchesForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this stop all batches forbidden response a status code equal to that given
func (o *StopAllBatchesForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the stop all batches forbidden response
func (o *StopAllBatchesForbidden) Code() int {
	return 403
}

func (o *StopAllBatchesForbidden) Error() string {
	return fmt.Sprintf("[POST /applications/{appName}/environments/{envName}/jobcomponents/{jobComponentName}/batches/stop][%d] stopAllBatchesForbidden", 403)
}

func (o *StopAllBatchesForbidden) String() string {
	return fmt.Sprintf("[POST /applications/{appName}/environments/{envName}/jobcomponents/{jobComponentName}/batches/stop][%d] stopAllBatchesForbidden", 403)
}

func (o *StopAllBatchesForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewStopAllBatchesNotFound creates a StopAllBatchesNotFound with default headers values
func NewStopAllBatchesNotFound() *StopAllBatchesNotFound {
	return &StopAllBatchesNotFound{}
}

/*
StopAllBatchesNotFound describes a response with status code 404, with default header values.

Not found
*/
type StopAllBatchesNotFound struct {
}

// IsSuccess returns true when this stop all batches not found response has a 2xx status code
func (o *StopAllBatchesNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this stop all batches not found response has a 3xx status code
func (o *StopAllBatchesNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this stop all batches not found response has a 4xx status code
func (o *StopAllBatchesNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this stop all batches not found response has a 5xx status code
func (o *StopAllBatchesNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this stop all batches not found response a status code equal to that given
func (o *StopAllBatchesNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the stop all batches not found response
func (o *StopAllBatchesNotFound) Code() int {
	return 404
}

func (o *StopAllBatchesNotFound) Error() string {
	return fmt.Sprintf("[POST /applications/{appName}/environments/{envName}/jobcomponents/{jobComponentName}/batches/stop][%d] stopAllBatchesNotFound", 404)
}

func (o *StopAllBatchesNotFound) String() string {
	return fmt.Sprintf("[POST /applications/{appName}/environments/{envName}/jobcomponents/{jobComponentName}/batches/stop][%d] stopAllBatchesNotFound", 404)
}

func (o *StopAllBatchesNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
