// Code generated by go-swagger; DO NOT EDIT.

package job

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// StopAllBatchesAndJobsForJobComponentReader is a Reader for the StopAllBatchesAndJobsForJobComponent structure.
type StopAllBatchesAndJobsForJobComponentReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *StopAllBatchesAndJobsForJobComponentReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 204:
		result := NewStopAllBatchesAndJobsForJobComponentNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewStopAllBatchesAndJobsForJobComponentBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewStopAllBatchesAndJobsForJobComponentUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewStopAllBatchesAndJobsForJobComponentForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewStopAllBatchesAndJobsForJobComponentNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /applications/{appName}/environments/{envName}/jobcomponents/{jobComponentName}/stop] stopAllBatchesAndJobsForJobComponent", response, response.Code())
	}
}

// NewStopAllBatchesAndJobsForJobComponentNoContent creates a StopAllBatchesAndJobsForJobComponentNoContent with default headers values
func NewStopAllBatchesAndJobsForJobComponentNoContent() *StopAllBatchesAndJobsForJobComponentNoContent {
	return &StopAllBatchesAndJobsForJobComponentNoContent{}
}

/*
StopAllBatchesAndJobsForJobComponentNoContent describes a response with status code 204, with default header values.

Success
*/
type StopAllBatchesAndJobsForJobComponentNoContent struct {
}

// IsSuccess returns true when this stop all batches and jobs for job component no content response has a 2xx status code
func (o *StopAllBatchesAndJobsForJobComponentNoContent) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this stop all batches and jobs for job component no content response has a 3xx status code
func (o *StopAllBatchesAndJobsForJobComponentNoContent) IsRedirect() bool {
	return false
}

// IsClientError returns true when this stop all batches and jobs for job component no content response has a 4xx status code
func (o *StopAllBatchesAndJobsForJobComponentNoContent) IsClientError() bool {
	return false
}

// IsServerError returns true when this stop all batches and jobs for job component no content response has a 5xx status code
func (o *StopAllBatchesAndJobsForJobComponentNoContent) IsServerError() bool {
	return false
}

// IsCode returns true when this stop all batches and jobs for job component no content response a status code equal to that given
func (o *StopAllBatchesAndJobsForJobComponentNoContent) IsCode(code int) bool {
	return code == 204
}

// Code gets the status code for the stop all batches and jobs for job component no content response
func (o *StopAllBatchesAndJobsForJobComponentNoContent) Code() int {
	return 204
}

func (o *StopAllBatchesAndJobsForJobComponentNoContent) Error() string {
	return fmt.Sprintf("[POST /applications/{appName}/environments/{envName}/jobcomponents/{jobComponentName}/stop][%d] stopAllBatchesAndJobsForJobComponentNoContent", 204)
}

func (o *StopAllBatchesAndJobsForJobComponentNoContent) String() string {
	return fmt.Sprintf("[POST /applications/{appName}/environments/{envName}/jobcomponents/{jobComponentName}/stop][%d] stopAllBatchesAndJobsForJobComponentNoContent", 204)
}

func (o *StopAllBatchesAndJobsForJobComponentNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewStopAllBatchesAndJobsForJobComponentBadRequest creates a StopAllBatchesAndJobsForJobComponentBadRequest with default headers values
func NewStopAllBatchesAndJobsForJobComponentBadRequest() *StopAllBatchesAndJobsForJobComponentBadRequest {
	return &StopAllBatchesAndJobsForJobComponentBadRequest{}
}

/*
StopAllBatchesAndJobsForJobComponentBadRequest describes a response with status code 400, with default header values.

Invalid batch
*/
type StopAllBatchesAndJobsForJobComponentBadRequest struct {
}

// IsSuccess returns true when this stop all batches and jobs for job component bad request response has a 2xx status code
func (o *StopAllBatchesAndJobsForJobComponentBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this stop all batches and jobs for job component bad request response has a 3xx status code
func (o *StopAllBatchesAndJobsForJobComponentBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this stop all batches and jobs for job component bad request response has a 4xx status code
func (o *StopAllBatchesAndJobsForJobComponentBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this stop all batches and jobs for job component bad request response has a 5xx status code
func (o *StopAllBatchesAndJobsForJobComponentBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this stop all batches and jobs for job component bad request response a status code equal to that given
func (o *StopAllBatchesAndJobsForJobComponentBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the stop all batches and jobs for job component bad request response
func (o *StopAllBatchesAndJobsForJobComponentBadRequest) Code() int {
	return 400
}

func (o *StopAllBatchesAndJobsForJobComponentBadRequest) Error() string {
	return fmt.Sprintf("[POST /applications/{appName}/environments/{envName}/jobcomponents/{jobComponentName}/stop][%d] stopAllBatchesAndJobsForJobComponentBadRequest", 400)
}

func (o *StopAllBatchesAndJobsForJobComponentBadRequest) String() string {
	return fmt.Sprintf("[POST /applications/{appName}/environments/{envName}/jobcomponents/{jobComponentName}/stop][%d] stopAllBatchesAndJobsForJobComponentBadRequest", 400)
}

func (o *StopAllBatchesAndJobsForJobComponentBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewStopAllBatchesAndJobsForJobComponentUnauthorized creates a StopAllBatchesAndJobsForJobComponentUnauthorized with default headers values
func NewStopAllBatchesAndJobsForJobComponentUnauthorized() *StopAllBatchesAndJobsForJobComponentUnauthorized {
	return &StopAllBatchesAndJobsForJobComponentUnauthorized{}
}

/*
StopAllBatchesAndJobsForJobComponentUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type StopAllBatchesAndJobsForJobComponentUnauthorized struct {
}

// IsSuccess returns true when this stop all batches and jobs for job component unauthorized response has a 2xx status code
func (o *StopAllBatchesAndJobsForJobComponentUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this stop all batches and jobs for job component unauthorized response has a 3xx status code
func (o *StopAllBatchesAndJobsForJobComponentUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this stop all batches and jobs for job component unauthorized response has a 4xx status code
func (o *StopAllBatchesAndJobsForJobComponentUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this stop all batches and jobs for job component unauthorized response has a 5xx status code
func (o *StopAllBatchesAndJobsForJobComponentUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this stop all batches and jobs for job component unauthorized response a status code equal to that given
func (o *StopAllBatchesAndJobsForJobComponentUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the stop all batches and jobs for job component unauthorized response
func (o *StopAllBatchesAndJobsForJobComponentUnauthorized) Code() int {
	return 401
}

func (o *StopAllBatchesAndJobsForJobComponentUnauthorized) Error() string {
	return fmt.Sprintf("[POST /applications/{appName}/environments/{envName}/jobcomponents/{jobComponentName}/stop][%d] stopAllBatchesAndJobsForJobComponentUnauthorized", 401)
}

func (o *StopAllBatchesAndJobsForJobComponentUnauthorized) String() string {
	return fmt.Sprintf("[POST /applications/{appName}/environments/{envName}/jobcomponents/{jobComponentName}/stop][%d] stopAllBatchesAndJobsForJobComponentUnauthorized", 401)
}

func (o *StopAllBatchesAndJobsForJobComponentUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewStopAllBatchesAndJobsForJobComponentForbidden creates a StopAllBatchesAndJobsForJobComponentForbidden with default headers values
func NewStopAllBatchesAndJobsForJobComponentForbidden() *StopAllBatchesAndJobsForJobComponentForbidden {
	return &StopAllBatchesAndJobsForJobComponentForbidden{}
}

/*
StopAllBatchesAndJobsForJobComponentForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type StopAllBatchesAndJobsForJobComponentForbidden struct {
}

// IsSuccess returns true when this stop all batches and jobs for job component forbidden response has a 2xx status code
func (o *StopAllBatchesAndJobsForJobComponentForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this stop all batches and jobs for job component forbidden response has a 3xx status code
func (o *StopAllBatchesAndJobsForJobComponentForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this stop all batches and jobs for job component forbidden response has a 4xx status code
func (o *StopAllBatchesAndJobsForJobComponentForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this stop all batches and jobs for job component forbidden response has a 5xx status code
func (o *StopAllBatchesAndJobsForJobComponentForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this stop all batches and jobs for job component forbidden response a status code equal to that given
func (o *StopAllBatchesAndJobsForJobComponentForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the stop all batches and jobs for job component forbidden response
func (o *StopAllBatchesAndJobsForJobComponentForbidden) Code() int {
	return 403
}

func (o *StopAllBatchesAndJobsForJobComponentForbidden) Error() string {
	return fmt.Sprintf("[POST /applications/{appName}/environments/{envName}/jobcomponents/{jobComponentName}/stop][%d] stopAllBatchesAndJobsForJobComponentForbidden", 403)
}

func (o *StopAllBatchesAndJobsForJobComponentForbidden) String() string {
	return fmt.Sprintf("[POST /applications/{appName}/environments/{envName}/jobcomponents/{jobComponentName}/stop][%d] stopAllBatchesAndJobsForJobComponentForbidden", 403)
}

func (o *StopAllBatchesAndJobsForJobComponentForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewStopAllBatchesAndJobsForJobComponentNotFound creates a StopAllBatchesAndJobsForJobComponentNotFound with default headers values
func NewStopAllBatchesAndJobsForJobComponentNotFound() *StopAllBatchesAndJobsForJobComponentNotFound {
	return &StopAllBatchesAndJobsForJobComponentNotFound{}
}

/*
StopAllBatchesAndJobsForJobComponentNotFound describes a response with status code 404, with default header values.

Not found
*/
type StopAllBatchesAndJobsForJobComponentNotFound struct {
}

// IsSuccess returns true when this stop all batches and jobs for job component not found response has a 2xx status code
func (o *StopAllBatchesAndJobsForJobComponentNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this stop all batches and jobs for job component not found response has a 3xx status code
func (o *StopAllBatchesAndJobsForJobComponentNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this stop all batches and jobs for job component not found response has a 4xx status code
func (o *StopAllBatchesAndJobsForJobComponentNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this stop all batches and jobs for job component not found response has a 5xx status code
func (o *StopAllBatchesAndJobsForJobComponentNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this stop all batches and jobs for job component not found response a status code equal to that given
func (o *StopAllBatchesAndJobsForJobComponentNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the stop all batches and jobs for job component not found response
func (o *StopAllBatchesAndJobsForJobComponentNotFound) Code() int {
	return 404
}

func (o *StopAllBatchesAndJobsForJobComponentNotFound) Error() string {
	return fmt.Sprintf("[POST /applications/{appName}/environments/{envName}/jobcomponents/{jobComponentName}/stop][%d] stopAllBatchesAndJobsForJobComponentNotFound", 404)
}

func (o *StopAllBatchesAndJobsForJobComponentNotFound) String() string {
	return fmt.Sprintf("[POST /applications/{appName}/environments/{envName}/jobcomponents/{jobComponentName}/stop][%d] stopAllBatchesAndJobsForJobComponentNotFound", 404)
}

func (o *StopAllBatchesAndJobsForJobComponentNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
